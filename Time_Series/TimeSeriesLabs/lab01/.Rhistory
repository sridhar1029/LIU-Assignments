type = "l",
xlab = "Year",
ylab = "TotN_conc",
main = "Time series including kernel smoother")
lines(x = kernel_model$x,
y = kernel_model$y)
kernel_model = ksmooth(x = data_ts[, 3],
y = data_ts[, 4],
bandwidth = 0.3)
# Plotting time series with fitted kernel smoother.
plot.ts(x = data_ts[, 3],
y = data_ts[, 4],
type = "l",
xlab = "Year",
ylab = "TotN_conc",
main = "Time series including kernel smoother")
lines(x = kernel_model$x,
y = kernel_model$y)
# Fitting kernel smoother w.r.t. t to time series.
kernel_model = ksmooth(x = data_ts[, 3],
y = data_ts[, 4],
bandwidth = 1.5)
# Plotting time series with fitted kernel smoother.
plot.ts(x = data_ts[, 3],
y = data_ts[, 4],
type = "l",
xlab = "Year",
ylab = "TotN_conc",
main = "Time series including kernel smoother")
lines(x = kernel_model$x,
y = kernel_model$y)
# Fitting kernel smoother w.r.t. t to time series.
kernel_model = ksmooth(x = data_ts[, 3],
y = data_ts[, 4],
bandwidth = 1.5)
# Plotting time series with fitted kernel smoother.
plot.ts(x = data_ts[, 3],
y = data_ts[, 4],
type = "l",
xlab = "Year",
ylab = "TotN_conc",
main = "Time series including kernel smoother")
lines(x = kernel_model$x,
y = kernel_model$y,
col = "red")
# Fitting kernel smoother w.r.t. t to time series.
kernel_model = ksmooth(x = data_ts[, 3],
y = data_ts[, 4],
bandwidth = 3)
# Plotting time series with fitted kernel smoother.
plot.ts(x = data_ts[, 3],
y = data_ts[, 4],
type = "l",
xlab = "Year",
ylab = "TotN_conc",
main = "Time series including kernel smoother")
lines(x = kernel_model$x,
y = kernel_model$y,
col = "red")
# Fitting kernel smoother w.r.t. t to time series.
kernel_model = ksmooth(x = data_ts[, 3],
y = data_ts[, 4],
bandwidth = 4)
# Plotting time series with fitted kernel smoother.
plot.ts(x = data_ts[, 3],
y = data_ts[, 4],
type = "l",
xlab = "Year",
ylab = "TotN_conc",
main = "Time series including kernel smoother")
lines(x = kernel_model$x,
y = kernel_model$y,
col = "red")
kernel_model = ksmooth(x = data_ts[, 3],
y = data_ts[, 4],
bandwidth = 5)
# Plotting time series with fitted kernel smoother.
plot.ts(x = data_ts[, 3],
y = data_ts[, 4],
type = "l",
xlab = "Year",
ylab = "TotN_conc",
main = "Time series including kernel smoother")
lines(x = kernel_model$x,
y = kernel_model$y,
col = "red")
View(kernel_model)
plot(x = linear_model$model$Time,
y = kernel_model$y - data_ts[, 4]
xlab = "Year",
ylab = "residuals",
type = "l",
main = "Residuals over time")
abline(h = 0)
plot(x = linear_model$model$Time,
y = kernel_model$y - data_ts[, 4],
xlab = "Year",
ylab = "residuals",
type = "l",
main = "Residuals over time")
abline(h = 0)
acf(x =  kernel_model$y - data_ts[, 4],
type = "correlation",
plot = TRUE,
main = "sample ACF of residuals")
# Importing data.
data_df = read.csv2("Rhine.csv", sep = ";")
# Converting dataframe to time series object.
data_ts = ts(data_df)
seasonal_means_model = lm(formula = data_ts[, 4] ~ data_ts[, 3] + as.factor(data_ts[, 2]))
View(seasonal_means_model)
plot.ts(x = data_ts[, 3],
y = data_ts[, 4],
type = "l",
xlab = "Year",
ylab = "TotN_conc",
main = "Time series including linear model")
lines(x = seasonal_means_model$model$Time,
y = seasonal_means_model$fitted.values,
col = "red")
seasonal_means_model$model$Time
View(data_df)
seasonal_means_model = lm(formula = TotN_conc ~ Time + as.factor(Month),
data = data_ts)
# Plotting time series with fitted kernel smoother.
plot.ts(x = data_ts[, 3],
y = data_ts[, 4],
type = "l",
xlab = "Year",
ylab = "TotN_conc",
main = "Time series including linear model")
lines(x = seasonal_means_model$model$Time
y = seasonal_means_model$fitted.values,
col = "red")
# Plotting time series with fitted kernel smoother.
plot.ts(x = data_ts[, 3],
y = data_ts[, 4],
type = "l",
xlab = "Year",
ylab = "TotN_conc",
main = "Time series including linear model")
lines(x = seasonal_means_model$model$Time,
y = seasonal_means_model$fitted.values,
col = "red")
plot(x = seasonal_means_model$model$Time,
y = seasonal_means_model$residuals,
xlab = "Year",
ylab = "residuals",
type = "l",
main = "Residuals over time fitting seasonal means model")
abline(h = 0)
acf(x =  seasonal_means_model$residuals,
type = "correlation",
plot = TRUE,
main = "sample ACF of residuals fitting seasonal means model")
library(MASS)
?step
step(object = seasonal_means_model,
direction = "both")
summary(step(object = seasonal_means_model,
direction = "both"))
# Loading data.
library(astsa)
install.packages("astsa")
# Loading data.
library(astsa)
data(oil)
data("gas")
View(gas)
class(gas)
?plot.ts
plot.ts(gas)
plot.ts(x ? gas)
plot.ts(x = gas)
plot.ts(x = gas,
type = "l",
main = "Original time series")
lines(x = oil,
col = "red")
plot.ts(x = gas,
type = "l",
main = "Original time series",
ylime = c(0, max(gas)))
lines(x = oil,
col = "red")
plot.ts(x = gas,
type = "l",
main = "Original time series",
ylim = c(0, max(gas)))
lines(x = oil,
col = "red")
plot.ts(x = gas,
type = "l",
main = "Original time series",
ylim = c(0, max(gas)))
lines(x = oil,
col = "red")
?lgend
?legend
plot.ts(x = gas,
type = "l",
main = "Original time series",
ylim = c(0, max(gas)),
ylab = "gas/oil")
lines(x = oil,
col = "red")
legend("topleft", legend = c("gas, oil"))
plot.ts(x = gas,
type = "l",
main = "Original time series",
ylim = c(0, max(gas)),
ylab = "gas/oil")
lines(x = oil,
col = "red")
legend("topleft", legend = c("gas, oil"), col = c("black", "red"))
plot.ts(x = gas,
type = "l",
main = "Original time series",
ylim = c(0, max(gas)),
ylab = "gas/oil")
lines(x = oil,
col = "red")
legend("topleft", legend = c("gas, oil"), lty = c(1,1), col = c("black", "red"))
plot.ts(x = gas,
type = "l",
main = "Original time series",
ylim = c(0, max(gas)),
ylab = "gas/oil")
lines(x = oil,
col = "red")
legend("topleft", legend = c("gas", "oil"), lty = c(1,1), col = c("black", "red"))
plot.ts(x = gas,
type = "l",
main = "Original time series",
ylim = c(0, max(gas)),
ylab = "gas/oil")
lines(x = oil,
col = "red")
legend("topleft", legend = c("gas", "oil"), col = c("black", "red"))
plot.ts(x = gas,
type = "l",
main = "Original time series",
ylim = c(0, max(gas)),
ylab = "gas/oil")
lines(x = oil,
col = "red")
legend("topleft", legend = c("gas", "oil"), col = c("black", "red"))
plot.ts(x = gas,
type = "l",
main = "Original time series",
ylim = c(0, max(gas)),
ylab = "gas/oil")
lines(x = oil,
col = "red")
legend("topleft", legend = c("gas", "oil"), lty = c(1,1), col = c("black", "red"))
View(has)
View(gas)
plot.ts(x = gas_log,
type = "l",
main = "Log-transformed time series",
ylim = c(0, max(log(gas))),
ylab = "log(gas), log(oil")
lines(x = oil_log,
col = "red")
legend("topleft", legend = c("log(gas)", "log(oil)"), lty = c(1,1), col = c("black", "red"))
plot.ts(x = gas_log,
type = "l",
main = "Log-transformed time series",
ylim = c(0, max(log(gas))),
ylab = "log(gas), log(oil")
lines(x = log(oil),
col = "red")
legend("topleft", legend = c("log(gas)", "log(oil)"), lty = c(1,1), col = c("black", "red"))
plot.ts(x = log(gas),
type = "l",
main = "Log-transformed time series",
ylim = c(0, max(log(gas))),
ylab = "log(gas), log(oil")
lines(x = log(oil),
col = "red")
legend("topleft", legend = c("log(gas)", "log(oil)"), lty = c(1,1), col = c("black", "red"))
plot.ts(x = log(gas),
type = "l",
main = "Log-transformed time series",
ylim = c(min(log(gas)), max(log(gas))),
ylab = "log(gas), log(oil")
lines(x = log(oil),
col = "red")
legend("topleft", legend = c("log(gas)", "log(oil)"), lty = c(1,1), col = c("black", "red"))
plot.ts(x = log(gas),
type = "l",
main = "Log-transformed time series",
ylim = c(min(log(oil)), max(log(gas))),
ylab = "log(gas), log(oil")
lines(x = log(oil),
col = "red")
legend("topleft", legend = c("log(gas)", "log(oil)"), lty = c(1,1), col = c("black", "red"))
# Plotting both transformed time series in one plot.
plot.ts(x = log(gas),
type = "l",
main = "Log-transformed time series",
ylim = c(min(log(oil)), max(log(gas))),
ylab = "log(gas), log(oil)")
lines(x = log(oil),
col = "red")
legend("topleft", legend = c("log(gas)", "log(oil)"), lty = c(1,1), col = c("black", "red"))
plot.ts(x = gas,
type = "l",
main = "Original time series",
ylim = c(0, max(gas)),
ylab = "gas, oil")
lines(x = oil,
col = "red")
legend("topleft", legend = c("gas", "oil"), lty = c(1,1), col = c("black", "red"))
?diff
log_oil = log(oil)
log_gas = log(gas)
# Plotting both transformed time series in one plot.
plot.ts(x = log_gas,
type = "l",
main = "Log-transformed time series",
ylim = c(min(log_oil), max(log_gas)),
ylab = "log(gas), log(oil)")
lines(x = log_oil,
col = "red")
legend("topleft", legend = c("log(gas)", "log(oil)"), lty = c(1,1), col = c("black", "red"))
log_gas_diff = diff(x = log_gas, lag = 1)
log_oil_diff = diff(x = log_oil, lag = 1)
# Plotting both transformed time series differences in one plot.
plot.ts(x = log_gas_diff,
type = "l",
main = "First differences ofn log-transformed time series",
ylim = c(min(log_oil_diff), max(log_gas_diff)),
ylab = "y_t(gas), x_t(oil)")
lines(x = log_oil_diff,
col = "red")
legend("topleft", legend = c("y_t(gas)", "x_t(oil)"), lty = c(1,1), col = c("black", "red"))
# Plotting sample ACF.
par(mfrow = c(1,2))
# Plotting sample ACF for log_gas_diff.
sample_acf_gas = acf(x = log_gas_diff,
type = "correlation",
plot = TRUE,
main = "sample ACF for y_t(gas)")
# Plotting sample ACF for log_oil_diff
sample_acf_gas = acf(x = log_oil_diff,
type = "correlation",
plot = TRUE,
main = "sample ACF for x_t(oil)")
knitr::opts_chunk$set(echo = TRUE, comment = NA, fig.align='center')
# Loading data.
library(astsa)
data(oil)
data(gas)
# Plotting both time series in one plot.
plot.ts(x = gas,
type = "l",
main = "Original time series",
ylim = c(0, max(gas)),
ylab = "gas, oil")
lines(x = oil,
col = "red")
legend("topleft", legend = c("gas", "oil"), lty = c(1,1), col = c("black", "red"))
# Log-transforming data.
log_oil = log(oil)
log_gas = log(gas)
# Plotting both transformed time series in one plot.
plot.ts(x = log_gas,
type = "l",
main = "Log-transformed time series",
ylim = c(min(log_oil), max(log_gas)),
ylab = "log(gas), log(oil)")
lines(x = log_oil,
col = "red")
legend("topleft", legend = c("log(gas)", "log(oil)"), lty = c(1,1), col = c("black", "red"))
# Computing first difference of the transformed data.
log_gas_diff = diff(x = log_gas, lag = 1)
log_oil_diff = diff(x = log_oil, lag = 1)
# Plotting both transformed time series differences in one plot.
plot.ts(x = log_gas_diff,
type = "l",
main = "First differences ofn log-transformed time series",
ylim = c(min(log_oil_diff), max(log_gas_diff)),
ylab = "y_t(gas), x_t(oil)")
lines(x = log_oil_diff,
col = "red")
legend("topleft", legend = c("y_t(gas)", "x_t(oil)"), lty = c(1,1), col = c("black", "red"))
# Plotting sample ACF.
par(mfrow = c(1,2))
# Plotting sample ACF for log_gas_diff.
sample_acf_gas = acf(x = log_gas_diff,
type = "correlation",
plot = TRUE,
main = "sample ACF for y_t(gas)")
# Plotting sample ACF for log_oil_diff
sample_acf_gas = acf(x = log_oil_diff,
type = "correlation",
plot = TRUE,
main = "sample ACF for x_t(oil)")
?lag
oil[1:10]
lag(oil[1:10])
lag(oil[1:10], 1)
lag(oil[1:10], 2)
test = lag(oil[1:10])
test
lag(test)
lag(test, 1)
test_1lag(test, 1)
test_1 = lag(test, 1)
test_1
ldeaths
lag(ldeaths, 12)
?plot
plot(x = log_oil_diff, y = log_gas_diff)
plot(x = log_oil_diff, y = log_gas_diff, main = "lag: 0")
plot(x = log_oil_diff, y = log_gas_diff, main = "no lag")
?ksmooth
plot(x = log_oil_diff, y = log_gas_diff, main = "no lag")
lines(ksmooth(x = log_oil_diff, y = log_gas_diff, bandwidth = 5, kernel = "normal"))
lines(ksmooth(x = log_oil_diff, y = log_gas_diff, bandwidth = 0.1, kernel = "normal"))
plot(x = log_oil_diff, y = log_gas_diff, main = "no lag")
lines(ksmooth(x = log_oil_diff, y = log_gas_diff, bandwidth = 0.1, kernel = "normal"))
plot(x = log_oil_diff, y = log_gas_diff, main = "no lag")
lines(ksmooth(x = log_oil_diff, y = log_gas_diff, bandwidth = 0.04, kernel = "normal"))
plot(x = log_oil_diff, y = log_gas_diff, main = "no lag")
lines(ksmooth(x = log_oil_diff, y = log_gas_diff, bandwidth = 0.05, kernel = "normal"))
plot(x = log_oil_diff, y = log_gas_diff, main = "no lag")
lines(ksmooth(x = log_oil_diff, y = log_gas_diff, bandwidth = 0.1, kernel = "normal"))
plot(x = log_oil_diff, y = log_gas_diff, main = "no lag")
lines(ksmooth(x = log_oil_diff, y = log_gas_diff, bandwidth = 0.05, kernel = "normal"))
plot(x = log_oil_diff, y = log_gas_diff, main = "no lag")
lines(ksmooth(x = log_oil_diff, y = log_gas_diff, bandwidth = 0.1, kernel = "normal"))
plot(x = log_oil_diff, y = log_gas_diff, main = "no lag")
lines(ksmooth(x = log_oil_diff, y = log_gas_diff, bandwidth = 0.1, kernel = "normal",
xlab = "x_t", ylab = "y_t"))
plot(x = log_oil_diff, y = log_gas_diff, main = "no lag", xlab = "x_t", ylab = "y_t")
lines(ksmooth(x = log_oil_diff, y = log_gas_diff, bandwidth = 0.1, kernel = "normal"))
plot(x = log_oil_diff, y = log_gas_diff, xlab = "x_t", ylab = "y_t (no lag)")
lines(ksmooth(x = log_oil_diff, y = log_gas_diff, bandwidth = 0.1, kernel = "normal"))
plot(x = log_oil_diff, y = log_gas_diff, xlab = "x_t", ylab = "y_t (no lag)")
lines(ksmooth(x = log_oil_diff, y = log_gas_diff, bandwidth = 0.1, kernel = "normal"))
plot(x = log_oil_diff, y = log_gas_diff, xlab = "x_t", ylab = "y_t (lag = 1)")
lines(ksmooth(x = log_oil_diff, y = lag(log_gas_diff, 1), bandwidth = 0.1, kernel = "normal"))
plot(x = log_oil_diff, y = lag(log_gas_diff, 1), xlab = "x_t", ylab = "y_t (lag = 1)")
lines(ksmooth(x = log_oil_diff, y = lag(log_gas_diff, 1), bandwidth = 0.1, kernel = "normal"))
par(mfrow = c(2,2))
plot(x = log_oil_diff, y = log_gas_diff, xlab = "x_t", ylab = "y_t (no lag)")
lines(ksmooth(x = log_oil_diff, y = log_gas_diff, bandwidth = 0.1, kernel = "normal"))
plot(x = log_oil_diff, y = lag(log_gas_diff, 1), xlab = "x_t", ylab = "y_t (lag = 1)")
lines(ksmooth(x = log_oil_diff, y = lag(log_gas_diff, 1), bandwidth = 0.1, kernel = "normal"))
plot(x = log_oil_diff, y = lag(log_gas_diff, 2), xlab = "x_t", ylab = "y_t (lag = 2)")
lines(ksmooth(x = log_oil_diff, y = lag(log_gas_diff, 2), bandwidth = 0.1, kernel = "normal"))
plot(x = log_oil_diff, y = lag(log_gas_diff, 3), xlab = "x_t", ylab = "y_t (lag = 3)")
lines(ksmooth(x = log_oil_diff, y = lag(log_gas_diff, 3), bandwidth = 0.1, kernel = "normal"))
causality_check = polyroot(1, -4, 2, 0, 0, 1)
causality_check = polyroot((c1, -4, 2, 0, 0, 1))
causality_check = polyroot(c(1, -4, 2, 0, 0, 1))
causality_check
Im(1)
Im(2)
Im(0.29)
Re(0.29)
# Checking invertibility.
polyroot(c(1, 0, 3, 0, 1, 0, -4))
?mod
?Im
?Re
sqrt(Im(0.1375513+0.6735351i)^2 + Re(0.1375513+0.6735351i)^2)
knitr::opts_chunk$set(echo = TRUE, comment = NA, fig.align='center')
set.seed(12345)
# Checking causality.
sqrt(Im(polyroot(c(1, -4, 2, 0, 0, 1)))^2 + Re(polyroot(c(1, -4, 2, 0, 0, 1)))^2)
?acf
ARMAacf(ar = 3/4,
ma = c(0, -(1/9)),
lag.max = max(sample_acf$lag))
ARMAacf(ar = 3/4,
ma = c(0, -(1/9)),
lag.max = 20)
acf(ARMAacf(ar = 3/4,
ma = c(0, -(1/9)),
lag.max = max(sample_acf$lag)))
acf(ARMAacf(ar = 3/4,
ma = c(0, -(1/9)),
lag.max = 20))
?ARMAacf
ARMAacf(ar = 3/4,
ma = c(0, -(1/9)),
lag.max = 20)
?acf
polyroot_causality = polyroot(c(1, -4, 2, 0, 0, 1))
causality_check = c()
for (i in 1:length(polyroot_causality)) {
causality_check[i] = sqrt(Im(polyroot_causality[i])^2 +
Re(polyroot_causality[i]^2))
}
causality_check
sqrt(Im(polyroot_causality)^2 + Re(polyroot_causality^2))
paste0("Causal? ", all(sqrt(Im(polyroot_causality)^2 + Re(polyroot_causality^2)) > 1))
# Checking causality.
polyroot_causality = polyroot(c(1, -4, 2, 0, 0, 1))
paste0("Causal? ", all(sqrt(Im(polyroot_causality)^2 + Re(polyroot_causality^2)) > 1))
# Checking invertibility.
polyroot_invertibility = polyroot(c(1, 0, 3, 0, 1, 0, -4))
paste0("Invertible? ", all(sqrt(Im(polyroot_invertibility)^2 + Re(polyroot_invertibility^2)) > 1))
# Checking causality.
polyroot_causality = polyroot(c(1, -4, 2, 0, 0, 1))
paste0("Causal? ", all(sqrt(Im(polyroot_causality)^2 + Re(polyroot_causality^2)) > 1))
# Checking invertibility.
polyroot_invertibility = polyroot(c(1, 0, 3, 0, 1, 0, -4))
paste0("Invertible? ", all(sqrt(Im(polyroot_invertibility)^2 + Re(polyroot_invertibility^2)) > 1))
