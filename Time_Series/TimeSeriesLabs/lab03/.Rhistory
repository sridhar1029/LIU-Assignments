?Ksmooth0
library(astsa)
?Ksmooth0
knitr::opts_chunk$set(echo = TRUE, comment = NA, fig.align='center')
num = 50
w = rnorm (num + 1, 0, 1)
w
?rnorm
v = rnorm (num , 0, 1)
mu = cumsum (w) # state : mu[0], mu[1] ,... , mu[50]
?cumsum
mu = cumsum (w) # state : mu[0], mu[1] ,... , mu[50]
y = mu[-1] + v # obs: y[1] ,... , y[50]
c(1,2,3,4)[-1]
?Ksmooth0
?Ksmooth0
library(astsa)
# Generating observations from true state space model.
set.seed (1)
num = 50
w = rnorm (num + 1, 0, 1) # (e_0, e_1, ..., e_50)
v = rnorm (num , 0, 1) # (v_1, v_2, ..., v_50)
mu = cumsum (w) # state : mu[0], mu[1] ,... ,
y = mu[-1] + v # obs: y[1] ,... , y[50]
# filter and smooth ( Ksmooth 0 does both )
ks = Ksmooth0(num, y, A = 1, mu0 = 0, Sigma0 = 1, Phi = 1, cQ = 1, cR = 1)
# start figure
par(mfrow = c(3, 1))
Time = 1:num
plot (Time , mu[-1], main = 'Predict ', ylim = c(-5, 10))
lines (Time , y, col = " green ")
lines (ks$xp)
lines (ks$xp + 2 * sqrt (ks$Pp), lty = 2, col = 4)
lines (ks$xp - 2 * sqrt (ks$Pp), lty = 2, col = 4)
plot (Time , mu[-1], main = 'Filter ', ylim = c(-5, 10))
lines (Time , y, col = " green ")
lines (ks$xf)
lines (ks$xf + 2 * sqrt (ks$Pf), lty = 2, col = 4)
lines (ks$xf - 2 * sqrt (ks$Pf), lty = 2, col = 4)
plot (Time , mu[-1], main = 'Smooth ', ylim = c(-5, 10))
lines (Time , y, col = " green ")
lines (ks$xs)
lines (ks$xs + 2 * sqrt (ks$Ps), lty = 2, col = 4)
lines (ks$xs - 2 * sqrt (ks$Ps), lty = 2, col = 4)
mu[1]
ks$x0n
sqrt (ks$P0n) # initial value info
?rnorm
?arima
library(forecast)
ar_fit = arima(x = x_t,
order = c(0,0,5))
knitr::opts_chunk$set(echo = TRUE, comment = NA, fig.align='center')
knitr::include_graphics("kalman_filter_algorithm.png")
library(astsa)
# Generating observations from true state space model.
# Setting parameters.
set.seed (1)
n = 50
Q_true = 1
R_true = 1
# Generating e_t (transition errors).
e_t = rnorm (n = n + 1,
mean = 0,
sd = sqrt(Q_true)) # (e_0, e_1, ..., e_50)
# Generating v_t (observation errors).
v_t = rnorm (n = n,
mean = 0,
sd = sqrt(R_true)) # (v_1, v_2, ..., v_50)
# Generating z_t (hidden states).
z_t = cumsum (e_t) # state : z_0, z_1, ..., z_50
# Generating x_t (observations).
x_t = z_t[-1] + v_t # obs: x_1 , ..., x_50
# Implementing Kalman filter.
run_kalman_filter = function(n, obs, A, C, Q, R, mu0, sigma0) {
# Filtering and smoothing (Ksmooth 0 does both) to predict hidden states.
ks = Ksmooth0(num = n,
y = obs, # observations
A = C, # observation matrix C
mu0 = mu0, # initial mean
Sigma0 = sigma0, # initial covariance
Phi = A, # intial transition matrix A
cQ = Q, # Q
cR = R) # R
# Plotting results.
par(mfrow = c(3, 1))
Time = 1:n
# Prediction.
plot (Time , z_t[-1], main = 'Predict ', ylim = c(-5, 10)) # true hidden states.
lines (Time , x_t, col = " green ") # observations.
lines (ks$xp) # state predictions.
lines (ks$xp + 2 * sqrt (ks$Pp), lty = 2, col = 4) # Prediction band for predictions.
lines (ks$xp - 2 * sqrt (ks$Pp), lty = 2, col = 4) # Prediction band for predictions.
# Filtering.
plot (Time , z_t[-1], main = 'Filter ', ylim = c(-5, 10))
lines (Time , x_t, col = " green ")
lines (ks$xf)
lines (ks$xf + 2 * sqrt (ks$Pf), lty = 2, col = 4)
lines (ks$xf - 2 * sqrt (ks$Pf), lty = 2, col = 4)
# Smoothing.
plot (Time , z_t[-1], main = 'Smooth ', ylim = c(-5, 10))
lines (Time , x_t, col = " green ")
lines (ks$xs)
lines (ks$xs + 2 * sqrt (ks$Ps), lty = 2, col = 4)
lines (ks$xs - 2 * sqrt (ks$Ps), lty = 2, col = 4)
# Printing information about initialization.
# True z_0.
z_t[1]
# Initial smoother mean, sd.
ks$x0n
sqrt (ks$P0n) # initial value info
}
# Applying Kalman filter.
run_kalman_filter(n = n, obs = x_t, A = 1, C = 1, Q = 1, R = 1, mu0 = 0, sigma0 = 1)
ar_fit = arima(x = x_t,
order = c(0,0,5))
ar_fit$arma
ar_fit$series
ar_fit$mask
ar_fit$residuals
?ar
ar(x = x_t, order.max = 5)
ar(x = x_t, order = 5)
test = ar(x = x_t, order = 5)
test$x.mean
test$series
test$frequency
knitr::opts_chunk$set(echo = TRUE, comment = NA, fig.align='center')
knitr::include_graphics("kalman_filter_algorithm.png")
library(forecast)
ar_fit = arima(x = x_t,
order = c(0,0,5))
library(astsa)
# Generating observations from true state space model.
# Setting parameters.
set.seed (1)
n = 50
Q_true = 1
R_true = 1
# Generating e_t (transition errors).
e_t = rnorm (n = n + 1,
mean = 0,
sd = sqrt(Q_true)) # (e_0, e_1, ..., e_50)
# Generating v_t (observation errors).
v_t = rnorm (n = n,
mean = 0,
sd = sqrt(R_true)) # (v_1, v_2, ..., v_50)
# Generating z_t (hidden states).
z_t = cumsum (e_t) # state : z_0, z_1, ..., z_50
# Generating x_t (observations).
x_t = z_t[-1] + v_t # obs: x_1 , ..., x_50
# Implementing Kalman filter.
# Performs Kalman prediction, filtering and smoothing and compares results to true states.
run_kalman_filter = function(n, states, obs, A, C, Q, R, mu0, sigma0) {
# Filtering and smoothing (Ksmooth 0 does both) to predict hidden states.
ks = Ksmooth0(num = n,
y = obs, # observations
A = C, # observation matrix C
mu0 = mu0, # initial mean
Sigma0 = sigma0, # initial covariance
Phi = A, # intial transition matrix A
cQ = Q, # Q
cR = R) # R
# Plotting results.
par(mfrow = c(3, 1))
Time = 1:n
# Prediction.
plot (Time , z_t[-1], main = 'Predict ', ylim = c(-5, 10)) # true hidden states.
lines (Time , x_t, col = " green ") # observations.
lines (ks$xp) # state predictions.
lines (ks$xp + 2 * sqrt (ks$Pp), lty = 2, col = 4) # Prediction band for predictions.
lines (ks$xp - 2 * sqrt (ks$Pp), lty = 2, col = 4) # Prediction band for predictions.
# Filtering.
plot (Time , z_t[-1], main = 'Filter ', ylim = c(-5, 10))
lines (Time , x_t, col = " green ")
lines (ks$xf)
lines (ks$xf + 2 * sqrt (ks$Pf), lty = 2, col = 4)
lines (ks$xf - 2 * sqrt (ks$Pf), lty = 2, col = 4)
# Smoothing.
plot (Time , z_t[-1], main = 'Smooth ', ylim = c(-5, 10))
lines (Time , x_t, col = " green ")
lines (ks$xs)
lines (ks$xs + 2 * sqrt (ks$Ps), lty = 2, col = 4)
lines (ks$xs - 2 * sqrt (ks$Ps), lty = 2, col = 4)
# Printing information about initialization.
# True z_0.
z_t[1]
# Initial smoother mean, sd.
ks$x0n
sqrt (ks$P0n) # initial value info
}
# Applying Kalman filter.
run_kalman_filter(n = n, states = z_t, obs = x_t,
A = 1, C = 1, Q = 1, R = 1, mu0 = 0, sigma0 = 1)
ar_fit = arima(x = x_t,
order = c(0,0,5))
length(x_t)
ma(x_t)
ma(x_t, order = 5)
plot(ma(x_t, order = 5))
library(forecast)
ma_5_smoother = ma(x = x_t,
order = 5)
plot (Time , z_t[-1], main = 'MA(5)-smoother', ylim = c(-5, 10)) # true hidden states.
plot (1:length(x_t) , z_t[-1], main = 'MA(5)-smoother', ylim = c(-5, 10)) # true hidden states.
lines (1:length(x_t) , x_t, col = " green ") # observations.
lines (ma_5_smoother) # MA(5)-state-predictions.
?ma
library(forecast)
ma_5_smoother = ma(x = x_t,
order = 5)
plot (1:length(x_t) , z_t[-1], main = 'MA(5)-smoother', ylim = c(-5, 10)) # true hidden states.
lines (1:length(x_t) , x_t, col = " green ") # observations.
lines (ma_5_smoother) # MA(5)-state-predictions.
library(forecast)
ma_5_smoother = ma(x = x_t,
order = 5)
plot (1:length(x_t) , z_t[-1], main = 'MA(5)-smoother', ylim = c(-5, 10)) # true hidden states.
lines (1:length(x_t) , x_t, col = " green ") # observations.
lines (ma_5_smoother) # MA(5)-state-predictions.
plot (1:length(x_t) , z_t[-1], main = 'MA(5)-smoother', ylim = c(-5, 10),
ylab = "state", xlab = "time") # true hidden states.
lines (1:length(x_t) , x_t, col = " green ") # observations.
lines (ma_5_smoother, col = "blue") # MA(5)-state-predictions.
legend(x = 1, y=10,
legend = c("True states", "Observations", "Smoother prediction"),
col = c("black", "green", "blue"))
plot (1:length(x_t) , z_t[-1], main = 'MA(5)-smoother', ylim = c(-5, 10),
ylab = "state", xlab = "time") # true hidden states.
lines (1:length(x_t) , x_t, col = " green ") # observations.
lines (ma_5_smoother, col = "blue") # MA(5)-state-predictions.
legend(x = 0, y=10,
legend = c("True states", "Observations", "Smoother prediction"),
col = c("black", "green", "blue"))
plot (1:length(x_t) , z_t[-1], main = 'MA(5)-smoother', ylim = c(-5, 10),
ylab = "state", xlab = "time") # true hidden states.
lines (1:length(x_t) , x_t, col = " green ") # observations.
lines (ma_5_smoother, col = "blue") # MA(5)-state-predictions.
legend(x = -1, y=10,
legend = c("True states", "Observations", "Smoother prediction"),
col = c("black", "green", "blue"))
plot (1:length(x_t) , z_t[-1], main = 'MA(5)-smoother', ylim = c(-5, 10),
ylab = "state", xlab = "time") # true hidden states.
lines (1:length(x_t) , x_t, col = " green ") # observations.
lines (ma_5_smoother, col = "blue") # MA(5)-state-predictions.
legend(x = -1, y=11,
legend = c("True states", "Observations", "Smoother prediction"),
col = c("black", "green", "blue"))
?legend
plot (1:length(x_t) , z_t[-1], main = 'MA(5)-smoother', ylim = c(-5, 10),
ylab = "state", xlab = "time", col = "black") # true hidden states.
lines (1:length(x_t) , x_t, col = " green ") # observations.
lines (ma_5_smoother, col = "blue") # MA(5)-state-predictions.
legend(x = -1, y=11,
legend = c("True states", "Observations", "Smoothed prediction"),
col = c("black", "green", "blue"))
?lines
plot (1:length(x_t) , z_t[-1], main = 'MA(5)-smoother', ylim = c(-5, 10),
ylab = "state", xlab = "time", col = "black") # true hidden states.
lines (x = 1:length(x_t), y = x_t, col = " green ") # observations.
lines (x = 1:length(x_t), y = ma_5_smoother, col = "blue") # MA(5)-state-predictions.
legend(x = -1, y=11,
legend = c("True states", "Observations", "Smoothed prediction"),
col = c("black", "green", "blue"))
plot (x = 1:length(x_t) , y = z_t[-1], main = 'MA(5)-smoother', ylim = c(-5, 10),
ylab = "state", xlab = "time", col = "black") # true hidden states.
lines (x = 1:length(x_t), y = x_t, col = " green ") # observations.
lines (x = 1:length(x_t), y = ma_5_smoother, col = "blue") # MA(5)-state-predictions.
legend(x = -1, y=11,
legend = c("True states", "Observations", "Smoothed prediction"),
col = c("black", "green", "blue"))
plot (x = 1:length(x_t) , y = z_t[-1], main = 'MA(5)-smoother', ylim = c(-5, 10),
ylab = "state", xlab = "time", col = "black") # true hidden states.
lines (x = 1:length(x_t), y = x_t, col = "green") # observations.
lines (x = 1:length(x_t), y = ma_5_smoother, col = "blue") # MA(5)-state-predictions.
legend(x = -1, y=11,
legend = c("True states", "Observations", "Smoothed prediction"),
col = c("black", "green", "blue"))
plot (x = 1:length(x_t) , y = z_t[-1], col = "black",
main = 'MA(5)-smoother', ylim = c(-5, 10),
ylab = "state", xlab = "time") # true hidden states.
lines (x = 1:length(x_t), y = x_t, col = "green") # observations.
lines (x = 1:length(x_t), y = ma_5_smoother, col = "blue") # MA(5)-state-predictions.
legend(x = -1, y=11,
legend = c("True states", "Observations", "Smoothed prediction"),
col = c("black", "green", "blue"))
plot (x = 1:length(x_t) , y = z_t[-1], col = "black",
main = 'MA(5)-smoother', ylim = c(-5, 10),
ylab = "state", xlab = "time") # true hidden states.
lines (x = 1:length(x_t), y = x_t, col = "blue") # observations.
lines (x = 1:length(x_t), y = ma_5_smoother, col = "blue") # MA(5)-state-predictions.
legend(x = -1, y=11,
legend = c("True states", "Observations", "Smoothed prediction"),
col = c("black", "green", "blue"))
?legend
plot (x = 1:length(x_t) , y = z_t[-1], col = "black",
main = 'MA(5)-smoother', ylim = c(-5, 10),
ylab = "state", xlab = "time") # true hidden states.
lines (x = 1:length(x_t), y = x_t, col = "green") # observations.
lines (x = 1:length(x_t), y = ma_5_smoother, col = "blue") # MA(5)-state-predictions.
legend(x = -1, y=11,
legend = c("True states", "Observations", "Smoothed prediction"),
col = c("black", "green", "blue"),
lty = 1:3)
legend(x = -1, y=11,
legend = c("True states", "Observations", "Smoothed prediction"),
col = c("black", "green", "blue"),
lty = 1)
legend(x = -1, y=11,
legend = c("True states", "Observations", "Smoothed prediction"),
col = c("black", "green", "blue"),
lty = 2)
legend(x = -1, y=11,
legend = c("True states", "Observations", "Smoothed prediction"),
col = c("black", "green", "blue"),
lty = 3)
?legend
legend(x = -1, y=11,
legend = c("True states", "Observations", "Smoothed prediction"),
col = c("black", "green", "blue"),
lty = 1)
?inv
?solve
# Implementing own kalman filter.
own_kalman = function(n, # T.
obs, # Observations.
A, # Transition matrix A.
C, # Emission matrix C.
Q,
R,
m_0, # Mean of initial state.
P_0) {
# Initialization.
k_gain_t = c()
m_t = m_0
P_t = P_0
for (t in 1:n) {
# Observation update.
k_gain_t[t] = P_t[t] * t(C) * solve(C * P_t[t] * t(C) + R)
m_t[t] = m_t[t] + k_gain_t[t] * (obs[t] - C * m_t[t])
P_t[t] = (1 - k_gain_t[t] * C) * P_t[t]
# Prediction step.
m_t[t+1] = A * m_t[t]
P_t[t+1] = A * P_t[t] * t(A) + Q
}
# Return.
return(list(m_t = m_t, P_t = P_t))
}
# Running own kalman filter on same generate observations to predict states.
own_kalman_results = own_kalman(n = n, obs = x_t, A = 1, C = 1, Q = 1, R = 1, m_0 = 0, P_0 = 1)
View(own_kalman_results)
plot(x = 1:length(x_t), y = z_t[-1], main = 'Own kalman filter', ylim = c(-5, 10)) # true hidden states.
lines (x = 1:length(x_t), y = x_t, col = " green ") # observations.
lines (x = 1:length(x_t), y = own_kalman_results$m_t) # state predictions.
length(1:length(x_t))
length(z_t[-1])
# Implementing own kalman filter.
own_kalman = function(n, # T.
obs, # Observations.
A, # Transition matrix A.
C, # Emission matrix C.
Q,
R,
m_0, # Mean of initial state.
P_0) {
# Initialization.
k_gain_t = c()
m_t = m_0
P_t = P_0
for (t in 1:n) {
# Observation update.
k_gain_t[t] = P_t[t] * t(C) * solve(C * P_t[t] * t(C) + R)
m_t[t] = m_t[t] + k_gain_t[t] * (obs[t] - C * m_t[t])
P_t[t] = (1 - k_gain_t[t] * C) * P_t[t]
# Prediction step.
m_t[t+1] = A * m_t[t]
P_t[t+1] = A * P_t[t] * t(A) + Q
}
# Return.
return(list(m_t = m_t[1:n], P_t = P_t[1:n]))
}
# Running own kalman filter on same generate observations to predict states.
own_kalman_results = own_kalman(n = n, obs = x_t, A = 1, C = 1, Q = 1, R = 1, m_0 = 0, P_0 = 1)
# Plotting results.
# Prediction.
plot(x = 1:length(x_t), y = z_t[-1], main = 'Own kalman filter', ylim = c(-5, 10)) # true hidden states.
lines (x = 1:length(x_t), y = x_t, col = " green ") # observations.
lines (x = 1:length(x_t), y = own_kalman_results$m_t) # state predictions.
plot(x = 1:length(x_t), y = z_t[-1], main = 'Own kalman filter',
ylab = "state", xlab = "time", ylim = c(-5, 10)) # true hidden states.
lines (x = 1:length(x_t), y = x_t, col = " green ") # observations.
lines (x = 1:length(x_t), y = own_kalman_results$m_t) # state predictions.
legend(x = -1, y=11,
legend = c("True states", "Observations", "Own kalman filter prediction"),
col = c("black", "green", "blue"),
lty = 1)
# Implementing own kalman filter.
own_kalman = function(n, # T.
obs, # Observations.
A, # Transition matrix A.
C, # Emission matrix C.
Q,
R,
m_0, # Mean of initial state.
P_0) {
# Initialization.
k_gain_t = c()
m_t = m_0
P_t = P_0
for (t in 1:n) {
# Observation update.
k_gain_t[t] = P_t[t] * t(C) * solve(C * P_t[t] * t(C) + R)
m_t[t] = m_t[t] + k_gain_t[t] * (obs[t] - C * m_t[t])
P_t[t] = (1 - k_gain_t[t] * C) * P_t[t]
# Prediction step.
m_t[t+1] = A * m_t[t]
P_t[t+1] = A * P_t[t] * t(A) + Q
}
# Return.
return(list(m_t = m_t[1:n], P_t = P_t[1:n]))
}
# Running own kalman filter on same generate observations to predict states.
own_kalman_results = own_kalman(n = n, obs = x_t, A = 1, C = 1, Q = 1, R = 1, m_0 = 0, P_0 = 1)
# Plotting results.
# Prediction.
plot(x = 1:length(x_t), y = z_t[-1], main = 'Own kalman filter',
ylab = "state", xlab = "time", ylim = c(-5, 10)) # true hidden states.
lines (x = 1:length(x_t), y = x_t, col = " green ") # observations.
lines (x = 1:length(x_t), y = own_kalman_results$m_t, col = "blue") # state predictions.
legend(x = -1, y=11,
legend = c("True states", "Observations", "Own kalman filter prediction"),
col = c("black", "green", "blue"),
lty = 1)
