install.packages("tensorflow")
library(tensorflow)
uninstall(tensorflow)
(811+85)/(811+85+133+341)
(811+341)/(811+85+133+341)
932/(932+6)
(944+37)/(944+37+389)
(932+39)/(932+39+393+6)
649/(649+289)
#Assignment 3
#1
my_lm = function(X, Y){#, X_cv, Y_cv){
X = as.matrix(X)
Y = as.matrix(Y)
W = ginv(t(X)%*%X)%*%t(X)%*%Y
return(W)
}
my_predict = function(W, X_test, Y_test=NULL){
if(is.null(Y_test)){
X_test = as.matrix(X_test)
pred_Y = X_test%*%W
return(pred_Y)
}else{
X_test = as.matrix(X_test)
Y_test = as.matrix(Y_test)
pred_Y = X_test%*%W
sdif = (Y_test - pred_Y)^2
loss = sum(sdif)/nrow(Y_test)
return(loss)
}
}
bsSel = function(X, Y, folds){
set.seed(12345)
seq_costs = matrix(0, nrow = 0, ncol = 3)
nc = ncol(X)
#Choosing best subset
for(k in 1:nc){
combs = combn(1:nc, k)
for(j in 1:ncol(combs)){
c = combs[, j]
X_sub <- X[, c]
X_sub <- cbind(X_sub, 1)
#calculating the K folds cv loss
set.seed(12345)
n = nrow(X)
fs = as.integer(n/folds)
rnd_ind <- sample(seq_len(n), size = n)
cvl = 0
for(i in 1:folds){
if(i==folds){
l = length(rnd_ind)
cv_ind = rnd_ind[((fs*(i-1))+1):l]
}
else{
cv_ind = rnd_ind[((fs*(i-1))+1):(fs*i)]
}
X_train = X_sub[-cv_ind,]
Y_train = Y[-cv_ind]
X_cv = X_sub[cv_ind,]
Y_cv = Y[cv_ind]
W = my_lm(X_train, Y_train)
cv_loss = my_predict(W, X_cv, Y_cv)
cvl = cvl + cv_loss
}
loss = cvl/folds
#end of calc
seq = paste(c, collapse = ",")
seq_costs = rbind(seq_costs, c(seq, loss, k))
}
}
seq_costs = as.data.frame(seq_costs)
colnames(seq_costs) = c("Sequence", "CV_Loss", "Num_Parameters")
seq_costs$CV_Loss = as.numeric(as.character(seq_costs$CV_Loss))
return(seq_costs)
}
#2
data = swiss
head(data)
Y = data$Fertility
X = data[,2:ncol(data)]
best = bsSel(X,Y, 5)
best_seq = best[which.min(best$CV_Loss),]
library(readxl)
library(ggplot2)
library(kknn)
library(MASS)
library(glmnet)
#2
data = swiss
head(data)
Y = data$Fertility
X = data[,2:ncol(data)]
best = bsSel(X,Y, 5)
best
?sqiss
?swiss
swiss
setwd("~/Desktop/ML_assignments_LIU/Lab1")
hist(cars$speed)
dim(cars)
library(readxl)
library(ggplot2)
library(kknn)
library(MASS)
library(glmnet)
#Assignment 1
tecatordata<-tecator_data[,c(1:101)]
#Assignment 4
# Assignment 4
#1
tecator_data = read_xlsx("tecator.xlsx", sheet = "data")
head(tecator_data)
data = tecator_data[, c("Protein", "Moisture")]
data$Intercept = 1
head(data)
tecatordata<-tecator_data[,c(1:101)]
nc<-ncol(tecatordata)
lmmodel <- glm(Fat~., data = tecatordata,family=gaussian)
model_AIC<-stepAIC(lmmodel,trace=FALSE,direction = "both")
head(tecatordata)
colnames(tecatordata)
View(tecator_data)
tecatordata<-tecator_data[,c(2:102)]
colnames(tecatordata)
nc<-ncol(tecatordata)
lmmodel <- glm(Fat~., data = tecatordata,family=gaussian)
model_AIC<-stepAIC(lmmodel,trace=FALSE,direction = "both")
#length(attr(terms(model_AIC),"term.labels"))
attr(terms(model_AIC),"term.labels")
#5
Y = as.matrix(data["Fat"])
X = as.matrix(data[,-ncol(data)])
#4
colnames(tecator_data)
head(tecator_data)
data = tecator_data
data$Moisture = NULL
data$Sample = NULL
data$Protein = NULL
colnames(data)
tecatordata<-tecator_data[,c(1:101)]
lmmodel <- glm(Fat~., data = tecatordata,family=gaussian)
tecatordata<-data[,c(1:101)]
lmmodel <- glm(Fat~., data = tecatordata,family=gaussian)
model_AIC<-stepAIC(lmmodel,trace=FALSE,direction = "both")
#length(attr(terms(model_AIC),"term.labels"))
attr(terms(model_AIC),"term.labels")
#5
Y = as.matrix(data["Fat"])
X = as.matrix(data[,-ncol(data)])
plot(glmnet(X, Y, alpha=0, lambda = 10^seq(5, -2, length=50)), "lambda",label = TRUE)
ridgereg<-glmnet(X,Y,alpha=0,family ="gaussian")
plot(ridgereg, "lambda", label=TRUE)
#6
set.seed(12345)
lassoreg<-glmnet(X,Y,alpha=1,family ="gaussian")
lam<-lassoreg$lambda
plot(lassoreg, "lambda" ,label=TRUE)
lam<-c(lam,0)
set.seed(12345)
lassreg_cv<-cv.glmnet(X,Y,alpha=1,family="gaussian",lambda = lam)
plot(lassreg_cv)
bestlam = lassreg_cv$lambda.1se
z<-as.matrix(coef(lassreg_cv,s="lambda.1se"))
z<-as.matrix(z[!rowSums(z==0),])
paste("Best lambda:" ,bestlam)
