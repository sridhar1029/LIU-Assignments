})
}
shinyApp(ui, server)
View(d)
View(d)
shinyApp(ui, server)
server <- function(input, output) {
highlight_out = reactive({geom_point(aes(x = input$highL, y=0, col="blue"))})
output$plot1 <- renderPlot({
df = data.frame(x = d$Infection_Risk[quantiles(d$Infection_Risk)], y = 0)
plotOutliers = geom_jitter(data = df, aes(x, y), height = 0, shape = 05, col = "red")
plot = ggplot(d, aes(Infection_Risk)) + geom_density() + plotOutliers
if(!is.null(input$highL)){
plot = plot + highlight_out()
}else {
plot
}
})
output$hover_info <- renderPrint({
if(!is.null(input$plot_hover)){
hover=input$plot_hover
dist= hover$x-d$Infection_Risk[quantiles(d$Infection_Risk)]
if(min(dist) < 0.2){
print(which.min(dist))
d[which.min(dist), ]
}
}
})
}
shinyApp(ui, server)
server <- function(input, output) {
highlight_out = reactive({input$highL})
output$plot1 <- renderPlot({
df = data.frame(x = d$Infection_Risk[quantiles(d$Infection_Risk)], y = 0)
plotOutliers = geom_jitter(data = df, aes(x, y), height = 0, shape = 05, col = "red")
plot = ggplot(d, aes(Infection_Risk)) + geom_density() + plotOutliers
if(!is.null(input$highL)){
plot = plot + geom_point(aes(x = highlight_out(), y=0, col="blue"))
}else {
plot
}
})
output$hover_info <- renderPrint({
if(!is.null(input$plot_hover)){
hover=input$plot_hover
dist= hover$x-d$Infection_Risk[quantiles(d$Infection_Risk)]
if(min(dist) < 0.2){
print(which.min(dist))
input$highL = which.min(dist)
d[which.min(dist), ]
}else {
input$highL = NULL
}
}
})
}
shinyApp(ui, server)
server <- function(input, output) {
highlight_out = reactiveVal()
highlight_out(NULL)
output$plot1 <- renderPlot({
df = data.frame(x = d$Infection_Risk[quantiles(d$Infection_Risk)], y = 0)
plotOutliers = geom_jitter(data = df, aes(x, y), height = 0, shape = 05, col = "red")
plot = ggplot(d, aes(Infection_Risk)) + geom_density() + plotOutliers
if(!is.null(highlight_out())){
plot = plot + geom_point(aes(x = highlight_out(), y=0, col="blue"))
}else {
plot
}
})
output$hover_info <- renderPrint({
if(!is.null(input$plot_hover)){
hover=input$plot_hover
dist= hover$x-d$Infection_Risk[quantiles(d$Infection_Risk)]
if(min(dist) < 0.2){
print(which.min(dist))
highlight_out(which.min(dist))
d[which.min(dist), ]
}else {
highlight_out(NULL)
}
}
})
}
shinyApp(ui, server)
shinyApp(ui, server)
server <- function(input, output) {
highlight_out = reactiveVal()
highlight_out(NULL)
output$plot1 <- renderPlot({
df = data.frame(x = d$Infection_Risk[quantiles(d$Infection_Risk)], y = 0)
plotOutliers = geom_jitter(data = df, aes(x, y), height = 0, shape = 05, col = "red")
plot = ggplot(d, aes(Infection_Risk)) + geom_density() + plotOutliers
if(!is.null(highlight_out())){
plot = plot + geom_point(aes(x = highlight_out(), y=0, col="blue"))
}else {
plot
}
})
output$hover_info <- renderPrint({
if(!is.null(input$plot_hover)){
hover=input$plot_hover
dist= hover$x-d$Infection_Risk[quantiles(d$Infection_Risk)]
if(min(dist) < 0.2){
print(which.min(dist))
highlight_out(which.min(dist))
d[which.min(dist), ]
print("Succeess!!")
}else {
highlight_out(NULL)
}
}
})
}
shinyApp(ui, server)
plot = ggplot(d, aes(Infection_Risk)) + geom_density() + plotOutliers
plot
plot + geom_point(aes(x = 4, y=0, col="blue"))
plot + geom_point(aes(x = 4, y=0, colour="blue"))
df = data.frame(x = d$Infection_Risk[quantiles(d$Infection_Risk)], y = 0, z = "outliers")
df
df[6,z]
df[6,'z']
df[6,'z'] = "highL"
df[6,'z']
df
df$z = as.character( df$z)
df
df = data.frame(x = d$Infection_Risk[quantiles(d$Infection_Risk)], y = 0, z = "outliers")
df
df$z = as.character( df$z)
df$z
df[6,'z'] = "highL"
plotOutliers = geom_jitter(data = df, aes(x, y), height = 0, shape = 05, col = z)
plotOutliers = geom_jitter(data = df, aes(x, y, col = z), height = 0, shape = 05)
plot = ggplot(d, aes(Infection_Risk)) + geom_density() + plotOutliers
plot
plotOutliers = geom_jitter(data = df, aes(x, y, fill = z), height = 0, shape = 05)
plot = ggplot(d, aes(Infection_Risk)) + geom_density() + plotOutliers
plot
df = data.frame(x = d$Infection_Risk[quantiles(d$Infection_Risk)], y = 0, z = "outliers")
plotOutliers = geom_jitter(data = df, aes(x, y), height = 0, shape = 05, col = "red")
plot = ggplot(d, aes(Infection_Risk)) + geom_density() + plotOutliers
plotOutliers = geom_jitter(data = df, aes(x, y, fillCol = z), height = 0, shape = 05)
plotOutliers = geom_jitter(data = df, aes(x, y, col = z), height = 0, shape = 05)
plot = ggplot(d, aes(Infection_Risk)) + geom_density() + plotOutliers
plot
server <- function(input, output) {
outliers_rv = reactiveVal()
df = data.frame(x = d$Infection_Risk[quantiles(d$Infection_Risk)], y = 0, z = "outliers")
plotOutliers = geom_jitter(data = df, aes(x, y, col = z), height = 0, shape = 05)
outliers_rv(plotOutliers)
output$plot1 <- renderPlot({
plot = ggplot(d, aes(Infection_Risk)) + geom_density() + outliers_rv()
#if(!is.null(highlight_out())){
#  plot = plot + geom_point(aes(x = highlight_out(), y=0, col="blue"))
#}else {
#  plot
#}
})
output$hover_info <- renderPrint({
if(!is.null(input$plot_hover)){
hover=input$plot_hover
dist= hover$x-d$Infection_Risk[quantiles(d$Infection_Risk)]
if(min(dist) < 0.2){
print(which.min(dist))
d[which.min(dist), ]
print("Succeess!!")
}
}
})
}
shinyApp(ui, server)
server <- function(input, output) {
outliers_rv = reactiveVal()
df = data.frame(x = d$Infection_Risk[quantiles(d$Infection_Risk)], y = 0, z = "outliers")
plotOutliers = geom_jitter(data = df, aes(x, y, col = z), height = 0, shape = 05)
outliers_rv(plotOutliers)
output$plot1 <- renderPlot({
plot = ggplot(d, aes(Infection_Risk)) + geom_density() + outliers_rv()
print("Success")
#if(!is.null(highlight_out())){
#  plot = plot + geom_point(aes(x = highlight_out(), y=0, col="blue"))
#}else {
#  plot
#}
})
output$hover_info <- renderPrint({
if(!is.null(input$plot_hover)){
hover=input$plot_hover
dist= hover$x-d$Infection_Risk[quantiles(d$Infection_Risk)]
if(min(dist) < 0.2){
print(which.min(dist))
d[which.min(dist), ]
print("Succeess!!")
}
}
})
}
shinyApp(ui, server)
server <- function(input, output) {
outliers_rv = reactiveVal()
df = data.frame(x = d$Infection_Risk[quantiles(d$Infection_Risk)], y = 0, z = "outliers")
outliers_rv(df)
output$plot1 <- renderPlot({
plotOutliers = geom_jitter(data = outliers_rv(), aes(x, y, col = z), height = 0, shape = 05)
plot = ggplot(d, aes(Infection_Risk)) + geom_density() + plotOutliers
print("Success")
#if(!is.null(highlight_out())){
#  plot = plot + geom_point(aes(x = highlight_out(), y=0, col="blue"))
#}else {
#  plot
#}
})
output$hover_info <- renderPrint({
if(!is.null(input$plot_hover)){
hover=input$plot_hover
dist= hover$x-d$Infection_Risk[quantiles(d$Infection_Risk)]
if(min(dist) < 0.2){
print(which.min(dist))
d[which.min(dist), ]
print("Succeess!!")
}
}
})
}
shinyApp(ui, server)
server <- function(input, output) {
outliers_rv = reactiveVal()
df = data.frame(x = d$Infection_Risk[quantiles(d$Infection_Risk)], y = 0, z = "outliers")
outliers_rv(df)
output$plot1 <- renderPlot({
#plotOutliers = geom_jitter(data = outliers_rv(), aes(x, y, col = z), height = 0, shape = 05)
plot = ggplot(d, aes(Infection_Risk)) + geom_density() #+ plotOutliers
print("Success")
#if(!is.null(highlight_out())){
#  plot = plot + geom_point(aes(x = highlight_out(), y=0, col="blue"))
#}else {
#  plot
#}
})
output$hover_info <- renderPrint({
if(!is.null(input$plot_hover)){
hover=input$plot_hover
dist= hover$x-d$Infection_Risk[quantiles(d$Infection_Risk)]
if(min(dist) < 0.2){
print(which.min(dist))
d[which.min(dist), ]
print("Succeess!!")
}
}
})
}
shinyApp(ui, server)
server <- function(input, output) {
outliers_rv = reactiveVal()
df = data.frame(x = d$Infection_Risk[quantiles(d$Infection_Risk)], y = 0, z = "outliers")
outliers_rv(df)
output$plot1 <- renderPlot({
#plotOutliers = geom_jitter(data = outliers_rv(), aes(x, y, col = z), height = 0, shape = 05)
plot = ggplot(d, aes(Infection_Risk)) + geom_density() #+ plotOutliers
print("Success")
#if(!is.null(highlight_out())){
#  plot = plot + geom_point(aes(x = highlight_out(), y=0, col="blue"))
#}else {
#  plot
#}
plot
})
output$hover_info <- renderPrint({
if(!is.null(input$plot_hover)){
hover=input$plot_hover
dist= hover$x-d$Infection_Risk[quantiles(d$Infection_Risk)]
if(min(dist) < 0.2){
print(which.min(dist))
d[which.min(dist), ]
print("Succeess!!")
}
}
})
}
shinyApp(ui, server)
server <- function(input, output) {
outliers_rv = reactiveVal()
df = data.frame(x = d$Infection_Risk[quantiles(d$Infection_Risk)], y = 0, z = "outliers")
outliers_rv(df)
output$plot1 <- renderPlot({
plotOutliers = geom_jitter(data = outliers_rv(), aes(x, y, col = z), height = 0, shape = 05)
plot = ggplot(d, aes(Infection_Risk)) + geom_density() + plotOutliers
print("Success")
#if(!is.null(highlight_out())){
#  plot = plot + geom_point(aes(x = highlight_out(), y=0, col="blue"))
#}else {
#  plot
#}
plot
})
output$hover_info <- renderPrint({
if(!is.null(input$plot_hover)){
hover=input$plot_hover
dist= hover$x-d$Infection_Risk[quantiles(d$Infection_Risk)]
if(min(dist) < 0.2){
print(which.min(dist))
d[which.min(dist), ]
print("Succeess!!")
}
}
})
}
shinyApp(ui, server)
server <- function(input, output) {
outliers_rv = reactiveVal()
df = data.frame(x = d$Infection_Risk[quantiles(d$Infection_Risk)], y = 0, z = "outliers")
outliers_rv(df)
output$plot1 <- renderPlot({
plotOutliers = geom_jitter(data = outliers_rv(), aes(x, y, col = z), height = 0, shape = 05)
plot = ggplot(d, aes(Infection_Risk)) + geom_density() + plotOutliers
print("Success")
#if(!is.null(highlight_out())){
#  plot = plot + geom_point(aes(x = highlight_out(), y=0, col="blue"))
#}else {
#  plot
#}
plot
})
output$hover_info <- renderPrint({
if(!is.null(input$plot_hover)){
hover=input$plot_hover
dist= sqrt(hover$x-d$Infection_Risk[quantiles(d$Infection_Risk)]^2)
if(min(dist) < 0.2){
print(which.min(dist))
d[which.min(dist), ]
print("Succeess!!")
}
}
})
}
shinyApp(ui, server)
server <- function(input, output) {
outliers_rv = reactiveVal()
df = data.frame(x = d$Infection_Risk[quantiles(d$Infection_Risk)], y = 0, z = "outliers")
outliers_rv(df)
output$plot1 <- renderPlot({
plotOutliers = geom_jitter(data = outliers_rv(), aes(x, y, col = z), height = 0, shape = 05)
plot = ggplot(d, aes(Infection_Risk)) + geom_density() + plotOutliers
print("Success")
#if(!is.null(highlight_out())){
#  plot = plot + geom_point(aes(x = highlight_out(), y=0, col="blue"))
#}else {
#  plot
#}
plot
})
output$hover_info <- renderPrint({
if(!is.null(input$plot_hover)){
hover=input$plot_hover
dist= sqrt((hover$x-d$Infection_Risk[quantiles(d$Infection_Risk)])^2)
if(min(dist) < 0.2){
print(which.min(dist))
d[which.min(dist), ]
print("Succeess!!")
}
}
})
}
shinyApp(ui, server)
server <- function(input, output) {
outliers_rv = reactiveVal()
df = data.frame(x = d$Infection_Risk[quantiles(d$Infection_Risk)], y = 0, z = "outliers")
outliers_rv(df)
output$plot1 <- renderPlot({
plotOutliers = geom_jitter(data = outliers_rv(), aes(x, y, col = z), height = 0, shape = 05)
plot = ggplot(d, aes(Infection_Risk)) + geom_density() + plotOutliers
})
output$hover_info <- renderPrint({
if(!is.null(input$plot_hover)){
hover=input$plot_hover
dist= sqrt((hover$x-d$Infection_Risk[quantiles(d$Infection_Risk)])^2)
if(min(dist) < 0.2){
print(which.min(dist))
ind = which.min(dist)
df = outliers_rv()
df$z = as.character(df$z)
df[ind, 'z'] = 'highL'
df$z = as.factor(df$z)
outliers_rv(df)
d[which.min(dist), ]
}
}
})
}
shinyApp(ui, server)
server <- function(input, output) {
outliers_rv = reactiveVal()
df = data.frame(x = d$Infection_Risk[quantiles(d$Infection_Risk)], y = 0, z = "outliers")
outliers_rv(df)
output$plot1 <- renderPlot({
plotOutliers = geom_jitter(data = outliers_rv(), aes(x, y, col = z), height = 0, shape = 05)
ggplot(d, aes(Infection_Risk)) + geom_density() + plotOutliers
})
output$hover_info <- renderPrint({
if(!is.null(input$plot_hover)){
hover=input$plot_hover
dist= sqrt((hover$x-d$Infection_Risk[quantiles(d$Infection_Risk)])^2)
if(min(dist) < 0.2){
print(which.min(dist))
ind = which.min(dist)
df = outliers_rv()
df$z = as.character(df$z)
df[ind, 'z'] = 'highL'
df$z = as.factor(df$z)
outliers_rv(df)
d[which.min(dist), ]
}
}
})
}
shinyApp(ui, server)
server <- function(input, output) {
outliers_rv = reactiveVal()
df = data.frame(x = d$Infection_Risk[quantiles(d$Infection_Risk)], y = 0, z = "outliers")
outliers_rv(df)
output$plot1 <- renderPlot({
plotOutliers = geom_jitter(data = outliers_rv(), aes(x, y, col = z), height = 0, shape = 05)
ggplot(d, aes(Infection_Risk)) + geom_density() + plotOutliers
})
output$hover_info <- renderPrint({
if(!is.null(input$plot_hover)){
hover=input$plot_hover
dist= sqrt((hover$x-d$Infection_Risk[quantiles(d$Infection_Risk)])^2)
if(min(dist) < 0.2){
print(which.min(dist))
ind = which.min(dist)
df = outliers_rv()
df$z = as.character(df$z)
df[ind, 'z'] = 'phigh'
df$z = as.factor(df$z)
outliers_rv(df)
d[which.min(dist), ]
}
}
})
}
shinyApp(ui, server)
df
df$z = as.character(df$z)
df[5, 'z'] = 'phigh'
df$z = as.factor(df$z)
df
df$z
df$z[5] = "outliers"
df
df$z = "outs"
df
server <- function(input, output) {
outliers_rv = reactiveVal()
df = data.frame(x = d$Infection_Risk[quantiles(d$Infection_Risk)], y = 0, z = "outs")
outliers_rv(df)
output$plot1 <- renderPlot({
plotOutliers = geom_jitter(data = outliers_rv(), aes(x, y, col = z), height = 0, shape = 05)
ggplot(d, aes(Infection_Risk)) + geom_density() + plotOutliers
})
output$hover_info <- renderPrint({
if(!is.null(input$plot_hover)){
hover=input$plot_hover
dist= sqrt((hover$x-d$Infection_Risk[quantiles(d$Infection_Risk)])^2)
if(min(dist) < 0.2){
print(which.min(dist))
ind = which.min(dist)
df = outliers_rv()
df$z = as.character(df$z)
df[ind, 'z'] = 'phigh'
df$z = as.factor(df$z)
outliers_rv(df)
d[which.min(dist), ]
}else {
df$z = "outs"
}
}
})
}
shinyApp(ui, server)
server <- function(input, output) {
outliers_rv = reactiveVal()
df = data.frame(x = d$Infection_Risk[quantiles(d$Infection_Risk)], y = 0, z = "outs")
outliers_rv(df)
output$plot1 <- renderPlot({
plotOutliers = geom_jitter(data = outliers_rv(), aes(x, y, col = z), height = 0, shape = 05)
ggplot(d, aes(Infection_Risk)) + geom_density() + plotOutliers
})
output$hover_info <- renderPrint({
if(!is.null(input$plot_hover)){
hover=input$plot_hover
dist= sqrt((hover$x-d$Infection_Risk[quantiles(d$Infection_Risk)])^2)
if(min(dist) < 0.2){
print(which.min(dist))
ind = which.min(dist)
df = outliers_rv()
df$z = as.character(df$z)
df[ind, 'z'] = 'phigh'
df$z = as.factor(df$z)
outliers_rv(df)
d[which.min(dist), ]
}else {
df = outliers_rv()
df$z = "outs"
outliers_rv(df)
}
}
})
}
shinyApp(ui, server)
