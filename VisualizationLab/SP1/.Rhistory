setwd("~/Desktop/LIU-Assignments/VisualizationLab/SP1")
library(ggplot2)
library(gridExtra)
library(grid)
library(plotly)
library(shiny)
#Q1
colNames = c("ID", "Length_of_Stay", "Age", "Infection_Risk", "Routine_Culturing_Ratio",
"Routine_Chest_X_ray_Ratio", "Number_of_Beds", "Medical_School_Affiliation",
"Region", "Average_Daily_Census", "Number_of_Nurses", "Available_Facilities_and_Services")
d = read.table("SENIC.txt", header = F, sep = "", row.names = 1, col.names = colNames)
head(d)
quantiles = function(r){
q = quantile(r)
names(q) = NULL
q1 = q[2]
q3 = q[4]
v1 = q3 + 1.5*(q3-q1)
v2 = q1 - 1.5*(q3-q1)
u = union(which((r>v1)), which((r<v2)))
return(u)
}
ui <- fluidPage(
fluidRow(
column(width = 8, plotOutput("plot1", height = 350,hover = hoverOpts(id ="plot_hover"))),
column(width = 4, verbatimTextOutput("hover_info"))
)
)
server <- function(input, output) {
outliers_rv = reactiveVal()
df = data.frame(x = d$Infection_Risk[quantiles(d$Infection_Risk)], y = 0, z = "outs")
outliers_rv(df)
output$plot1 <- renderPlot({
plotOutliers = geom_jitter(data = outliers_rv(), aes(x, y, col = z), height = 0, shape = 05)
ggplot(d, aes(Infection_Risk)) + geom_density() + plotOutliers
})
output$hover_info <- renderPrint({
if(!is.null(input$plot_hover)){
hover=input$plot_hover
dist= sqrt((hover$x-d$Infection_Risk[quantiles(d$Infection_Risk)])^2)
if(min(dist) < 0.2){
print(which.min(dist))
ind = which.min(dist)
df = outliers_rv()
df$z = as.character(df$z)
df[ind, 'z'] = 'phigh'
df$z = as.factor(df$z)
outliers_rv(df)
d[which.min(dist), ]
}else {
df = outliers_rv()
df$z = "outs"
outliers_rv(df)
}
}
})
}
shinyApp(ui, server)
shinyApp(ui, server)
server <- function(input, output) {
hover = FALSE
outliers_rv = reactiveVal()
df = data.frame(x = d$Infection_Risk[quantiles(d$Infection_Risk)], y = 0, z = "outs")
outliers_rv(df)
output$plot1 <- renderPlot({
plotOutliers = geom_jitter(data = outliers_rv(), aes(x, y, col = z), height = 0, shape = 05)
ggplot(d, aes(Infection_Risk)) + geom_density() + plotOutliers
})
output$hover_info <- renderPrint({
if(!is.null(input$plot_hover)){
hover=input$plot_hover
dist= sqrt((hover$x-d$Infection_Risk[quantiles(d$Infection_Risk)])^2)
if(min(dist) < 0.2){
print(which.min(dist))
ind = which.min(dist)
df = outliers_rv()
df$z = as.character(df$z)
df[ind, 'z'] = 'phigh'
df$z = as.factor(df$z)
outliers_rv(df)
hover = TRUE
d[which.min(dist), ]
}else {
df = outliers_rv()
df$z = "outs"
outliers_rv(df)
}
}else if (hover) {
df = outliers_rv()
df$z = "outs"
outliers_rv(df)
}
})
}
shinyApp(ui, server)
server <- function(input, output) {
hover = FALSE
outliers_rv = reactiveVal()
df = data.frame(x = d$Infection_Risk[quantiles(d$Infection_Risk)], y = 0, z = "outs")
outliers_rv(df)
output$plot1 <- renderPlot({
plotOutliers = geom_jitter(data = outliers_rv(), aes(x, y, col = z), height = 0, shape = 05)
ggplot(d, aes(Infection_Risk)) + geom_density() + plotOutliers
})
output$hover_info <- renderPrint({
if(!is.null(input$plot_hover)){
hover=input$plot_hover
dist= sqrt((hover$x-d$Infection_Risk[quantiles(d$Infection_Risk)])^2)
if(min(dist) < 0.2){
print(which.min(dist))
ind = which.min(dist)
df = outliers_rv()
df$z = as.character(df$z)
df[ind, 'z'] = 'phigh'
df$z = as.factor(df$z)
outliers_rv(df)
hover = TRUE
d[which.min(dist), ]
}else {
df = outliers_rv()
df$z = "outs"
outliers_rv(df)
}
}else if (hover) {
df = outliers_rv()
df$z = "outs"
outliers_rv(df)
hover = FALSE
}
})
}
shinyApp(ui, server)
server <- function(input, output) {
outliers_rv = reactiveVal()
df = data.frame(x = d$Infection_Risk[quantiles(d$Infection_Risk)], y = 0, z = "outs")
outliers_rv(df)
output$plot1 <- renderPlot({
plotOutliers = geom_jitter(data = outliers_rv(), aes(x, y, col = z), height = 0, shape = 05)
ggplot(d, aes(Infection_Risk)) + geom_density() + plotOutliers
})
output$hover_info <- renderPrint({
if(!is.null(input$plot_hover)){
hover=input$plot_hover
dist= sqrt((hover$x-d$Infection_Risk[quantiles(d$Infection_Risk)])^2)
if(min(dist) < 0.2){
print(which.min(dist))
ind = which.min(dist)
df = outliers_rv()
df$z = as.character(df$z)
df[ind, 'z'] = 'phigh'
df$z = as.factor(df$z)
outliers_rv(df)
d[which.min(dist), ]
}else {
df = outliers_rv()
df$z = "outs"
outliers_rv(df)
}
}else{
df = outliers_rv()
df$z = "outs"
outliers_rv(df)
}
})
}
shinyApp(ui, server)
server <- function(input, output) {
outliers_rv = reactiveVal()
df = data.frame(x = d$Infection_Risk[quantiles(d$Infection_Risk)], y = 0, z = "outs")
outliers_rv(df)
output$plot1 <- renderPlot({
plotOutliers = geom_jitter(data = outliers_rv(), aes(x, y, col = z), height = 0, shape = 05)
ggplot(d, aes(Infection_Risk)) + geom_density() + plotOutliers
})
output$hover_info <- renderPrint({
if(!is.null(input$plot_hover)){
hover=input$plot_hover
dist= sqrt((hover$x-d$Infection_Risk[quantiles(d$Infection_Risk)])^2)
if(min(dist) < 0.2){
print(which.min(dist))
ind = which.min(dist)
df = outliers_rv()
df$z = as.character(df$z)
df[ind, 'z'] = 'phigh'
df$z = as.factor(df$z)
outliers_rv(df)
d[which.min(dist), ]
}
}
})
df = outliers_rv()
df$z = "outs"
outliers_rv(df)
}
shinyApp(ui, server)
server <- function(input, output) {
outliers_rv = reactiveVal()
df = data.frame(x = d$Infection_Risk[quantiles(d$Infection_Risk)], y = 0, z = "outs")
outliers_rv(df)
output$plot1 <- renderPlot({
plotOutliers = geom_jitter(data = outliers_rv(), aes(x, y, col = z), height = 0, shape = 05)
ggplot(d, aes(Infection_Risk)) + geom_density() + plotOutliers
})
output$hover_info <- renderPrint({
if(!is.null(input$plot_hover)){
hover=input$plot_hover
dist= sqrt((hover$x-d$Infection_Risk[quantiles(d$Infection_Risk)])^2)
if(min(dist) < 0.2){
print(which.min(dist))
ind = which.min(dist)
df = outliers_rv()
df$z = as.character(df$z)
df[ind, 'z'] = 'phigh'
df$z = as.factor(df$z)
outliers_rv(df)
d[which.min(dist), ]
}else{
df = outliers_rv()
df$z = "outs"
outliers_rv(df)
}
}
})
}
shinyApp(ui, server)
?plotOutput
server <- function(input, output) {
outliers_rv = reactiveVal()
df = data.frame(x = d$Infection_Risk[quantiles(d$Infection_Risk)], y = 0, z = "outs")
outliers_rv(df)
output$plot1 <- renderPlot({
plotOutliers = geom_jitter(data = outliers_rv(), aes(x, y, col = z), height = 0, shape = 05)
ggplot(d, aes(Infection_Risk)) + geom_density() + plotOutliers
})
output$hover_info <- renderPrint({
if(!is.null(input$plot_hover)){
hover=input$plot_hover
dist= sqrt((hover$x-d$Infection_Risk[quantiles(d$Infection_Risk)])^2)
if(min(dist) < 0.2){
print(which.min(dist))
ind = which.min(dist)
df = outliers_rv()
df$z = as.character(df$z)
df[ind, 'z'] = 'phigh'
df$z = as.factor(df$z)
outliers_rv(df)
d[which.min(dist), ]
}
}else{
df = outliers_rv()
df$z = "outs"
outliers_rv(df)
}
})
}
shinyApp(ui, server)
server <- function(input, output) {
outliers_rv = reactiveVal()
df = data.frame(x = d$Infection_Risk[quantiles(d$Infection_Risk)], y = 0, z = "outs")
outliers_rv(df)
distance <- function(x1, x2) {
dis = sqrt((x1-x2)^2)
min(dis)
}
output$plot1 <- renderPlot({
plotOutliers = geom_jitter(data = outliers_rv(), aes(x, y, col = z), height = 0, shape = 05)
ggplot(d, aes(Infection_Risk)) + geom_density() + plotOutliers
})
output$hover_info <- renderPrint({
if(!is.null(input$plot_hover)){
hover=input$plot_hover
dist= distance(hover$x, d$Infection_Risk[quantiles(d$Infection_Risk)])
if(dist < 0.2){
print(which.min(dist))
ind = which.min(dist)
df = outliers_rv()
df$z = as.character(df$z)
df[ind, 'z'] = 'phigh'
df$z = as.factor(df$z)
outliers_rv(df)
d[which.min(dist), ]
}
else{
df = outliers_rv()
df$z = "outs"
outliers_rv(df)
}
}2879
})
}
shinyApp(ui, server)
server <- function(input, output) {
outliers_rv = reactiveVal()
df = data.frame(x = d$Infection_Risk[quantiles(d$Infection_Risk)], y = 0, z = "outs")
outliers_rv(df)
distance <- function(x1, x2) {
dis = sqrt((x1-x2)^2)
min(dis)
}
output$plot1 <- renderPlot({
plotOutliers = geom_jitter(data = outliers_rv(), aes(x, y, col = z), height = 0, shape = 05)
ggplot(d, aes(Infection_Risk)) + geom_density() + plotOutliers
})
output$hover_info <- renderPrint({
if(!is.null(input$plot_hover)){
hover=input$plot_hover
dist= distance(hover$x, d$Infection_Risk[quantiles(d$Infection_Risk)])
if(dist < 0.2){
print(which.min(dist))
ind = which.min(dist)
df = outliers_rv()
df$z = as.character(df$z)
df[ind, 'z'] = 'phigh'
df$z = as.factor(df$z)
outliers_rv(df)
d[which.min(dist), ]
}
else{
df = outliers_rv()
df$z = "outs"
outliers_rv(df)
}
}
})
}
shinyApp(ui, server)
