}
})
}
shinyApp(ui, server)
shinyApp(ui, server)
###Try 2
ui <- fluidPage(
titlePanel(title = "Shiny app for density plots of all categories"),
fluidRow(
column(3, plotOutput("P1",hover = hoverOpts(id = "plot_hover", delayType = "throttle"))),
column(3, plotOutput("P2",hover = hoverOpts(id = "plot_hover", delayType = "throttle"))),
column(3, plotOutput("P3",hover = hoverOpts(id = "plot_hover", delayType = "throttle"))),
column(3, plotOutput("P4",hover = hoverOpts(id = "plot_hover", delayType = "throttle")))
),
fluidRow(
column(3, plotOutput("P5",hover = hoverOpts(id = "plot_hover", delayType = "throttle"))),
column(3, plotOutput("P6",hover = hoverOpts(id = "plot_hover", delayType = "throttle"))),
column(3, plotOutput("P7",hover = hoverOpts(id = "plot_hover", delayType = "throttle"))),
column(3, plotOutput("P8",hover = hoverOpts(id = "plot_hover", delayType = "throttle")))
),
fluidRow(
column(4, plotOutput("P9",hover = hoverOpts(id = "plot_hover", delayType = "throttle"))),
column(4, plotOutput("P10",hover = hoverOpts(id = "plot_hover", delayType = "throttle"))),
column(4, plotOutput("P11",hover = hoverOpts(id = "plot_hover", delayType = "throttle")))
),
verbatimTextOutput("plot_hoverinfo"),
verbatimTextOutput("P1")
)
server <- function(input, output) {
print("Are you working?????")
colNames = c("Length_of_Stay", "Age", "Infection_Risk", "Routine_Culturing_Ratio",
"Routine_Chest_X_ray_Ratio", "Number_of_Beds", "Medical_School_Affiliation",
"Region", "Average_Daily_Census", "Number_of_Nurses", "Available_Facilities_and_Services")
all_plots = list()
c = 1
for(i in colNames){
plotName = paste("P", c, sep = "")
colSel = i
outliers = quantiles(d[,i])
if(!identical(outliers, integer(0))){
df = data.frame(x = d[,i][outliers], y = 0)
plotOutliers = geom_jitter(data = df, aes(x, y), height = 0, shape = 05, col = "red")
all_plots[[plotName]] = ggplot(d, aes_string(colSel)) + geom_density() + plotOutliers
}else {
all_plots[[plotName]] = ggplot(d, aes_string(colSel)) + geom_density()
}
c = c + 1
}
output$P1 <- renderPlot({all_plots$P1})
output$P2 <- renderPlot({all_plots$P2})
output$P3 <- renderPlot({all_plots$P3})
output$P4 <- renderPlot({all_plots$P4})
output$P5 <- renderPlot({all_plots$P5})
output$P6 <- renderPlot({all_plots$P6})
output$P7 <- renderPlot({all_plots$P7})
output$P8 <- renderPlot({all_plots$P8})
output$P9 <- renderPlot({all_plots$P9})
output$P10 <- renderPlot({all_plots$P10})
output$P11 <- renderPlot({all_plots$P11})
output$plot_hoverinfo <- renderPrint({
cat("Hover (throttled):\n")
str(input$plot_hover)
})
output$P1 <- renderPrint({
if(!is.null(input$plot_hover)){
hover=input$plot_hover
dist=sqrt((hover$x-d$Length_of_Stay)^2+(hover$y-d$Length_of_Stay)^2)
if(min(dist) < 3){
id = which.min(dist)
if(id %in% outliers(d$Length_of_Stay))
id
}
}
})
}
shinyApp(ui, server)
###Try 2
ui <- fluidPage(
titlePanel(title = "Shiny app for density plots of all categories"),
fluidRow(
column(3, plotOutput("P1",hover = hoverOpts(id = "plot_hover", delayType = "throttle"))),
column(3, plotOutput("P2",hover = hoverOpts(id = "plot_hover", delayType = "throttle"))),
column(3, plotOutput("P3",hover = hoverOpts(id = "plot_hover", delayType = "throttle"))),
column(3, plotOutput("P4",hover = hoverOpts(id = "plot_hover", delayType = "throttle")))
),
fluidRow(
column(3, plotOutput("P5",hover = hoverOpts(id = "plot_hover", delayType = "throttle"))),
column(3, plotOutput("P6",hover = hoverOpts(id = "plot_hover", delayType = "throttle"))),
column(3, plotOutput("P7",hover = hoverOpts(id = "plot_hover", delayType = "throttle"))),
column(3, plotOutput("P8",hover = hoverOpts(id = "plot_hover", delayType = "throttle")))
),
fluidRow(
column(4, plotOutput("P9",hover = hoverOpts(id = "plot_hover", delayType = "throttle"))),
column(4, plotOutput("P10",hover = hoverOpts(id = "plot_hover", delayType = "throttle"))),
column(4, plotOutput("P11",hover = hoverOpts(id = "plot_hover", delayType = "throttle")))
),
verbatimTextOutput("plot_hoverinfo")
)
server <- function(input, output) {
print("Are you working?????")
colNames = c("Length_of_Stay", "Age", "Infection_Risk", "Routine_Culturing_Ratio",
"Routine_Chest_X_ray_Ratio", "Number_of_Beds", "Medical_School_Affiliation",
"Region", "Average_Daily_Census", "Number_of_Nurses", "Available_Facilities_and_Services")
all_plots = list()
c = 1
for(i in colNames){
plotName = paste("P", c, sep = "")
colSel = i
outliers = quantiles(d[,i])
if(!identical(outliers, integer(0))){
df = data.frame(x = d[,i][outliers], y = 0)
plotOutliers = geom_jitter(data = df, aes(x, y), height = 0, shape = 05, col = "red")
all_plots[[plotName]] = ggplot(d, aes_string(colSel)) + geom_density() + plotOutliers
}else {
all_plots[[plotName]] = ggplot(d, aes_string(colSel)) + geom_density()
}
c = c + 1
}
output$P1 <- renderPlot({all_plots$P1})
output$P2 <- renderPlot({all_plots$P2})
output$P3 <- renderPlot({all_plots$P3})
output$P4 <- renderPlot({all_plots$P4})
output$P5 <- renderPlot({all_plots$P5})
output$P6 <- renderPlot({all_plots$P6})
output$P7 <- renderPlot({all_plots$P7})
output$P8 <- renderPlot({all_plots$P8})
output$P9 <- renderPlot({all_plots$P9})
output$P10 <- renderPlot({all_plots$P10})
output$P11 <- renderPlot({all_plots$P11})
output$plot_hoverinfo <- renderPrint({
cat("Hover (throttled):\n")
str(input$plot_hover)
})
output$P1 <- renderPrint({
if(!is.null(input$plot_hover)){
hover=input$plot_hover
dist=sqrt((hover$x-d$Length_of_Stay)^2+(hover$y-d$Length_of_Stay)^2)
if(min(dist) < 3){
id = which.min(dist)
if(id %in% outliers(d$Length_of_Stay))
id
}
}
})
}
shinyApp(ui, server)
###Try 2
ui <- fluidPage(
titlePanel(title = "Shiny app for density plots of all categories"),
fluidRow(
column(3, plotOutput("P1",hover = hoverOpts(id = "plot_hover", delayType = "throttle"))),
column(3, plotOutput("P2",hover = hoverOpts(id = "plot_hover", delayType = "throttle"))),
column(3, plotOutput("P3",hover = hoverOpts(id = "plot_hover", delayType = "throttle"))),
column(3, plotOutput("P4",hover = hoverOpts(id = "plot_hover", delayType = "throttle")))
),
fluidRow(
column(3, plotOutput("P5",hover = hoverOpts(id = "plot_hover", delayType = "throttle"))),
column(3, plotOutput("P6",hover = hoverOpts(id = "plot_hover", delayType = "throttle"))),
column(3, plotOutput("P7",hover = hoverOpts(id = "plot_hover", delayType = "throttle"))),
column(3, plotOutput("P8",hover = hoverOpts(id = "plot_hover", delayType = "throttle")))
),
fluidRow(
column(4, plotOutput("P9",hover = hoverOpts(id = "plot_hover", delayType = "throttle"))),
column(4, plotOutput("P10",hover = hoverOpts(id = "plot_hover", delayType = "throttle"))),
column(4, plotOutput("P11",hover = hoverOpts(id = "plot_hover", delayType = "throttle")))
),
verbatimTextOutput("plot_hoverinfo"),
verbatimTextOutput("P1")
)
server <- function(input, output) {
print("Are you working?????")
colNames = c("Length_of_Stay", "Age", "Infection_Risk", "Routine_Culturing_Ratio",
"Routine_Chest_X_ray_Ratio", "Number_of_Beds", "Medical_School_Affiliation",
"Region", "Average_Daily_Census", "Number_of_Nurses", "Available_Facilities_and_Services")
all_plots = list()
c = 1
for(i in colNames){
plotName = paste("P", c, sep = "")
colSel = i
outliers = quantiles(d[,i])
if(!identical(outliers, integer(0))){
df = data.frame(x = d[,i][outliers], y = 0)
plotOutliers = geom_jitter(data = df, aes(x, y), height = 0, shape = 05, col = "red")
all_plots[[plotName]] = ggplot(d, aes_string(colSel)) + geom_density() + plotOutliers
}else {
all_plots[[plotName]] = ggplot(d, aes_string(colSel)) + geom_density()
}
c = c + 1
}
output$P1 <- renderPlot({all_plots$P1})
output$P2 <- renderPlot({all_plots$P2})
output$P3 <- renderPlot({all_plots$P3})
output$P4 <- renderPlot({all_plots$P4})
output$P5 <- renderPlot({all_plots$P5})
output$P6 <- renderPlot({all_plots$P6})
output$P7 <- renderPlot({all_plots$P7})
output$P8 <- renderPlot({all_plots$P8})
output$P9 <- renderPlot({all_plots$P9})
output$P10 <- renderPlot({all_plots$P10})
output$P11 <- renderPlot({all_plots$P11})
output$plot_hoverinfo <- renderPrint({
cat("Hover (throttled):\n")
str(input$plot_hover)
})
}
shinyApp(ui, server)
###Try 2
ui <- fluidPage(
titlePanel(title = "Shiny app for density plots of all categories"),
fluidRow(
column(3, plotOutput("P1",hover = hoverOpts(id = "plot_hover", delayType = "throttle"))),
column(3, plotOutput("P2",hover = hoverOpts(id = "plot_hover", delayType = "throttle"))),
column(3, plotOutput("P3",hover = hoverOpts(id = "plot_hover", delayType = "throttle"))),
column(3, plotOutput("P4",hover = hoverOpts(id = "plot_hover", delayType = "throttle")))
),
fluidRow(
column(3, plotOutput("P5",hover = hoverOpts(id = "plot_hover", delayType = "throttle"))),
column(3, plotOutput("P6",hover = hoverOpts(id = "plot_hover", delayType = "throttle"))),
column(3, plotOutput("P7",hover = hoverOpts(id = "plot_hover", delayType = "throttle"))),
column(3, plotOutput("P8",hover = hoverOpts(id = "plot_hover", delayType = "throttle")))
),
fluidRow(
column(4, plotOutput("P9",hover = hoverOpts(id = "plot_hover", delayType = "throttle"))),
column(4, plotOutput("P10",hover = hoverOpts(id = "plot_hover", delayType = "throttle"))),
column(4, plotOutput("P11",hover = hoverOpts(id = "plot_hover", delayType = "throttle")))
),
verbatimTextOutput("plot_hoverinfo"),
verbatimTextOutput("P1_hov")
)
server <- function(input, output) {
print("Are you working?????")
colNames = c("Length_of_Stay", "Age", "Infection_Risk", "Routine_Culturing_Ratio",
"Routine_Chest_X_ray_Ratio", "Number_of_Beds", "Medical_School_Affiliation",
"Region", "Average_Daily_Census", "Number_of_Nurses", "Available_Facilities_and_Services")
all_plots = list()
c = 1
for(i in colNames){
plotName = paste("P", c, sep = "")
colSel = i
outliers = quantiles(d[,i])
if(!identical(outliers, integer(0))){
df = data.frame(x = d[,i][outliers], y = 0)
plotOutliers = geom_jitter(data = df, aes(x, y), height = 0, shape = 05, col = "red")
all_plots[[plotName]] = ggplot(d, aes_string(colSel)) + geom_density() + plotOutliers
}else {
all_plots[[plotName]] = ggplot(d, aes_string(colSel)) + geom_density()
}
c = c + 1
}
output$P1 <- renderPlot({all_plots$P1})
output$P2 <- renderPlot({all_plots$P2})
output$P3 <- renderPlot({all_plots$P3})
output$P4 <- renderPlot({all_plots$P4})
output$P5 <- renderPlot({all_plots$P5})
output$P6 <- renderPlot({all_plots$P6})
output$P7 <- renderPlot({all_plots$P7})
output$P8 <- renderPlot({all_plots$P8})
output$P9 <- renderPlot({all_plots$P9})
output$P10 <- renderPlot({all_plots$P10})
output$P11 <- renderPlot({all_plots$P11})
output$plot_hoverinfo <- renderPrint({
cat("Hover (throttled):\n")
str(input$plot_hover)
})
output$P1_hov <- renderPrint({
if(!is.null(input$plot_hover)){
hover=input$plot_hover
dist=sqrt((hover$x-d$Length_of_Stay)^2+(hover$y-d$Length_of_Stay)^2)
if(min(dist) < 3){
id = which.min(dist)
if(id %in% outliers(d$Length_of_Stay))
id
}
}
})
}
shinyApp(ui, server)
###Try 2
ui <- fluidPage(
titlePanel(title = "Shiny app for density plots of all categories"),
fluidRow(
column(3, plotOutput("P1",hover = hoverOpts(id = "plot_hover", delayType = "throttle"))),
column(3, plotOutput("P2",hover = hoverOpts(id = "plot_hover", delayType = "throttle"))),
column(3, plotOutput("P3",hover = hoverOpts(id = "plot_hover", delayType = "throttle"))),
column(3, plotOutput("P4",hover = hoverOpts(id = "plot_hover", delayType = "throttle")))
),
fluidRow(
column(3, plotOutput("P5",hover = hoverOpts(id = "plot_hover", delayType = "throttle"))),
column(3, plotOutput("P6",hover = hoverOpts(id = "plot_hover", delayType = "throttle"))),
column(3, plotOutput("P7",hover = hoverOpts(id = "plot_hover", delayType = "throttle"))),
column(3, plotOutput("P8",hover = hoverOpts(id = "plot_hover", delayType = "throttle")))
),
fluidRow(
column(4, plotOutput("P9",hover = hoverOpts(id = "plot_hover", delayType = "throttle"))),
column(4, plotOutput("P10",hover = hoverOpts(id = "plot_hover", delayType = "throttle"))),
column(4, plotOutput("P11",hover = hoverOpts(id = "plot_hover", delayType = "throttle")))
),
fluidRow(
column(6, verbatimTextOutput("plot_hoverinfo")),
column(6, verbatimTextOutput("P1_hov"))
)
)
server <- function(input, output) {
print("Are you working?????")
colNames = c("Length_of_Stay", "Age", "Infection_Risk", "Routine_Culturing_Ratio",
"Routine_Chest_X_ray_Ratio", "Number_of_Beds", "Medical_School_Affiliation",
"Region", "Average_Daily_Census", "Number_of_Nurses", "Available_Facilities_and_Services")
all_plots = list()
c = 1
for(i in colNames){
plotName = paste("P", c, sep = "")
colSel = i
outliers = quantiles(d[,i])
if(!identical(outliers, integer(0))){
df = data.frame(x = d[,i][outliers], y = 0)
plotOutliers = geom_jitter(data = df, aes(x, y), height = 0, shape = 05, col = "red")
all_plots[[plotName]] = ggplot(d, aes_string(colSel)) + geom_density() + plotOutliers
}else {
all_plots[[plotName]] = ggplot(d, aes_string(colSel)) + geom_density()
}
c = c + 1
}
output$P1 <- renderPlot({all_plots$P1})
output$P2 <- renderPlot({all_plots$P2})
output$P3 <- renderPlot({all_plots$P3})
output$P4 <- renderPlot({all_plots$P4})
output$P5 <- renderPlot({all_plots$P5})
output$P6 <- renderPlot({all_plots$P6})
output$P7 <- renderPlot({all_plots$P7})
output$P8 <- renderPlot({all_plots$P8})
output$P9 <- renderPlot({all_plots$P9})
output$P10 <- renderPlot({all_plots$P10})
output$P11 <- renderPlot({all_plots$P11})
output$plot_hoverinfo <- renderPrint({
cat("Hover (throttled):\n")
str(input$plot_hover)
})
output$P1_hov <- renderPrint({
if(!is.null(input$plot_hover)){
hover=input$plot_hover
dist=sqrt((hover$x-d$Length_of_Stay)^2+(hover$y-d$Length_of_Stay)^2)
if(min(dist) < 3){
id = which.min(dist)
if(id %in% outliers(d$Length_of_Stay))
id
}
}
})
}
shinyApp(ui, server)
output$P1_hov <- renderPrint({
if(!is.null(input$plot_hover)){
hover=input$plot_hover
dist=sqrt((hover$x-d$Length_of_Stay)^2+(hover$y-d$Length_of_Stay)^2)
if(min(dist) < 3){
id = which.min(dist)
print(id)
if(id %in% outliers(d$Length_of_Stay))
id
}
}
})
server <- function(input, output) {
print("Are you working?????")
colNames = c("Length_of_Stay", "Age", "Infection_Risk", "Routine_Culturing_Ratio",
"Routine_Chest_X_ray_Ratio", "Number_of_Beds", "Medical_School_Affiliation",
"Region", "Average_Daily_Census", "Number_of_Nurses", "Available_Facilities_and_Services")
all_plots = list()
c = 1
for(i in colNames){
plotName = paste("P", c, sep = "")
colSel = i
outliers = quantiles(d[,i])
if(!identical(outliers, integer(0))){
df = data.frame(x = d[,i][outliers], y = 0)
plotOutliers = geom_jitter(data = df, aes(x, y), height = 0, shape = 05, col = "red")
all_plots[[plotName]] = ggplot(d, aes_string(colSel)) + geom_density() + plotOutliers
}else {
all_plots[[plotName]] = ggplot(d, aes_string(colSel)) + geom_density()
}
c = c + 1
}
output$P1 <- renderPlot({all_plots$P1})
output$P2 <- renderPlot({all_plots$P2})
output$P3 <- renderPlot({all_plots$P3})
output$P4 <- renderPlot({all_plots$P4})
output$P5 <- renderPlot({all_plots$P5})
output$P6 <- renderPlot({all_plots$P6})
output$P7 <- renderPlot({all_plots$P7})
output$P8 <- renderPlot({all_plots$P8})
output$P9 <- renderPlot({all_plots$P9})
output$P10 <- renderPlot({all_plots$P10})
output$P11 <- renderPlot({all_plots$P11})
output$plot_hoverinfo <- renderPrint({
cat("Hover (throttled):\n")
str(input$plot_hover)
})
output$P1_hov <- renderPrint({
if(!is.null(input$plot_hover)){
hover=input$plot_hover
dist=sqrt((hover$x-d$Length_of_Stay)^2+(hover$y-d$Length_of_Stay)^2)
if(min(dist) < 3){
id = which.min(dist)
print(id)
if(id %in% outliers(d$Length_of_Stay))
id
}
}
})
}
shinyApp(ui, server)
server <- function(input, output) {
print("Are you working?????")
colNames = c("Length_of_Stay", "Age", "Infection_Risk", "Routine_Culturing_Ratio",
"Routine_Chest_X_ray_Ratio", "Number_of_Beds", "Medical_School_Affiliation",
"Region", "Average_Daily_Census", "Number_of_Nurses", "Available_Facilities_and_Services")
all_plots = list()
c = 1
for(i in colNames){
plotName = paste("P", c, sep = "")
colSel = i
outliers = quantiles(d[,i])
if(!identical(outliers, integer(0))){
df = data.frame(x = d[,i][outliers], y = 0)
plotOutliers = geom_jitter(data = df, aes(x, y), height = 0, shape = 05, col = "red")
all_plots[[plotName]] = ggplot(d, aes_string(colSel)) + geom_density() + plotOutliers
}else {
all_plots[[plotName]] = ggplot(d, aes_string(colSel)) + geom_density()
}
c = c + 1
}
output$P1 <- renderPlot({all_plots$P1})
output$P2 <- renderPlot({all_plots$P2})
output$P3 <- renderPlot({all_plots$P3})
output$P4 <- renderPlot({all_plots$P4})
output$P5 <- renderPlot({all_plots$P5})
output$P6 <- renderPlot({all_plots$P6})
output$P7 <- renderPlot({all_plots$P7})
output$P8 <- renderPlot({all_plots$P8})
output$P9 <- renderPlot({all_plots$P9})
output$P10 <- renderPlot({all_plots$P10})
output$P11 <- renderPlot({all_plots$P11})
output$plot_hoverinfo <- renderPrint({
cat("Hover (throttled):\n")
str(input$plot_hover)
})
output$P1_hov <- renderPrint({
if(!is.null(input$plot_hover)){
print(input$plot_hover)
hover=input$plot_hover
dist=sqrt((hover$x-d$Length_of_Stay)^2+(hover$y-d$Length_of_Stay)^2)
if(min(dist) < 3){
id = which.min(dist)
print(id)
if(id %in% outliers(d$Length_of_Stay))
id
}
}
})
}
shinyApp(ui, server)
server <- function(input, output) {
print("Are you working?????")
colNames = c("Length_of_Stay", "Age", "Infection_Risk", "Routine_Culturing_Ratio",
"Routine_Chest_X_ray_Ratio", "Number_of_Beds", "Medical_School_Affiliation",
"Region", "Average_Daily_Census", "Number_of_Nurses", "Available_Facilities_and_Services")
all_plots = list()
c = 1
for(i in colNames){
plotName = paste("P", c, sep = "")
colSel = i
outliers = quantiles(d[,i])
if(!identical(outliers, integer(0))){
df = data.frame(x = d[,i][outliers], y = 0)
plotOutliers = geom_jitter(data = df, aes(x, y), height = 0, shape = 05, col = "red")
all_plots[[plotName]] = ggplot(d, aes_string(colSel)) + geom_density() + plotOutliers
}else {
all_plots[[plotName]] = ggplot(d, aes_string(colSel)) + geom_density()
}
c = c + 1
}
output$P1 <- renderPlot({plotly(all_plots$P1)})
output$P2 <- renderPlot({all_plots$P2})
output$P3 <- renderPlot({all_plots$P3})
output$P4 <- renderPlot({all_plots$P4})
output$P5 <- renderPlot({all_plots$P5})
output$P6 <- renderPlot({all_plots$P6})
output$P7 <- renderPlot({all_plots$P7})
output$P8 <- renderPlot({all_plots$P8})
output$P9 <- renderPlot({all_plots$P9})
output$P10 <- renderPlot({all_plots$P10})
output$P11 <- renderPlot({all_plots$P11})
output$plot_hoverinfo <- renderPrint({
cat("Hover (throttled):\n")
str(input$plot_hover)
})
output$P1_hov <- renderPrint({
if(!is.null(input$plot_hover)){
print(input$plot_hover)
hover=input$plot_hover
dist=sqrt((hover$x-d$Length_of_Stay)^2+(hover$y-d$Length_of_Stay)^2)
if(min(dist) < 3){
id = which.min(dist)
print(id)
if(id %in% outliers(d$Length_of_Stay))
id
}
}
})
}
shinyApp(ui, server)
add_sf()
