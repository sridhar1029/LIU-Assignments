points(true_mu[2,], type="o", col="red")
#points(true_mu[3,], type="o", col="green")
# Producing the training data
for(n in 1:N) {
k <- sample(1:2,1,prob=true_pi)
for(d in 1:D) {
x[n,d] <- rbinom(1,1,true_mu[k,d])
}
}
K=2 # number of guessed components
z <- matrix(nrow=N, ncol=K) # fractional component assignments
pi <- vector(length = K) # mixing coefficients
mu <- matrix(nrow=K, ncol=D) # conditional distributions
llik <- vector(length = max_it) # log likelihood of the EM iterations
# Random initialization of the paramters
pi <- runif(K,0.49,0.51)
pi <- pi / sum(pi)
for(k in 1:K) {
mu[k,] <- runif(D,0.49,0.51)
}
pi
mu
old = 0
plot(mu[1,], type="o", col="blue", ylim=c(0,1))
points(mu[2,], type="o", col="red")
# E-step: Computation of the fractional component assignments
# Your code here
Estep <- list()
# denominator
total <- matrix(0, nrow = nrow(x), ncol= 1)
z = matrix(1, nrow = nrow(x), ncol = length(pi))
i=1
j=1
z[, i] = z[, i] * dbinom(x[ ,j], 1, mu[i,j])
View(z)
z = matrix(1, nrow = nrow(x), ncol = length(pi))
for (i in 1:length(pi)) {
for (j in 1:ncol(x)) {
z[, i] = z[, i] * dbinom(x[ ,j], 1, mu[i,j])
}
z[, i] = z[, i] * pi[i]
total= total + z[,i]
}
for(i in 1:length(pi)){
z[,i] = z[,i]/total
}
View(z)
# #Log likelihood computation.
# # Your code here
for (i in 1:length(pi)) {
#i = 1
for (j in 1:ncol(x)) {
#j = 1
llik[it] <- sum(pi[i] * dbinom(x[,j], K, mu[ ,j]))
}
}
cat("iteration: ", it, "log likelihood: ", llik[it], "\n")
flush.console()
new_mu = matrix(nrow = nrow(mu), ncol = ncol(mu))
new_pi = colSums(z)/nrow(x)
for (i in 1:length(pi)){
nm = sum(z[,i])
new_mu[i,] = colSums(x*z[,i])/nm
}
mu = new_mu
pi = new_pi
for(it in 1:max_it) {
plot(mu[1,], type="o", col="blue", ylim=c(0,1))
points(mu[2,], type="o", col="red")
#points(mu[3,], type="o", col="green")
#points(mu[4,], type="o", col="yellow")
Sys.sleep(0.5)
# E-step: Computation of the fractional component assignments
# Your code here
Estep <- list()
# denominator
total <- matrix(0, nrow = nrow(x), ncol= 1)
z = matrix(1, nrow = nrow(x), ncol = length(pi))
for (i in 1:length(pi)) {
for (j in 1:ncol(x)) {
z[, i] = z[, i] * dbinom(x[ ,j], 1, mu[i,j])
}
z[, i] = z[, i] * pi[i]
total= total + z[,i]
}
for(i in 1:length(pi)){
z[,i] = z[,i]/total
}
# #Log likelihood computation.
# # Your code here
for (i in 1:length(pi)) {
#i = 1
for (j in 1:ncol(x)) {
#j = 1
llik[it] <- sum(pi[i] * dbinom(x[,j], K, mu[ ,j]))
}
}
cat("iteration: ", it, "log likelihood: ", llik[it], "\n")
flush.console()
# Stop if the log likelihood has not changed significantly
# Your code here
# if(abs(old-llik[it])<min_change){
#   break
# }
# else{
#   old = llik[it]
# }
#M-step: ML parameter estimation from the data and fractional component assignments
# Your code here
new_mu = matrix(nrow = nrow(mu), ncol = ncol(mu))
new_pi = colSums(z)/nrow(x)
for (i in 1:length(pi)){
nm = sum(z[,i])
new_mu[i,] = colSums(x*z[,i])/nm
}
mu = new_mu
pi = new_pi
}
set.seed(1234567890)
max_it <- 100 # max number of EM iterations
min_change <- 0.01 # min change in log likelihood between two consecutive EM iterations
N=1000 # number of training points
D=10 # number of dimensions
x <- matrix(nrow=N, ncol=D) # training data
true_pi <- vector(length = 2) # true mixing coefficients
true_mu <- matrix(nrow=2, ncol=D) # true conditional distributions
true_pi=c(1/2,1/2)#,1/3)
true_mu[1,]=c(0.5, 0.6,0.4,0.7,0.3,0.8,0.2,0.9,0.1,1)
true_mu[2,]=c(0.7, 0.4,0.6,0.3,0.7,0.2,0.8,0.1,0.9,0)
#true_mu[3,]=c(0.3, 0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5)
plot(true_mu[1,], type="o", col="blue", ylim=c(0,1))
points(true_mu[2,], type="o", col="red")
#points(true_mu[3,], type="o", col="green")
# Producing the training data
for(n in 1:N) {
k <- sample(1:2,1,prob=true_pi)
for(d in 1:D) {
x[n,d] <- rbinom(1,1,true_mu[k,d])
}
}
K=2 # number of guessed components
z <- matrix(nrow=N, ncol=K) # fractional component assignments
pi <- vector(length = K) # mixing coefficients
mu <- matrix(nrow=K, ncol=D) # conditional distributions
llik <- vector(length = max_it) # log likelihood of the EM iterations
# Random initialization of the paramters
pi <- runif(K,0.49,0.51)
pi <- pi / sum(pi)
for(k in 1:K) {
mu[k,] <- runif(D,0.49,0.51)
}
pi
mu
old = 0
for(it in 1:max_it) {
plot(mu[1,], type="o", col="blue", ylim=c(0,1))
points(mu[2,], type="o", col="red")
#points(mu[3,], type="o", col="green")
#points(mu[4,], type="o", col="yellow")
Sys.sleep(0.5)
# E-step: Computation of the fractional component assignments
# Your code here
Estep <- list()
# denominator
total <- matrix(0, nrow = nrow(x), ncol= 1)
z = matrix(1, nrow = nrow(x), ncol = length(pi))
for (i in 1:length(pi)) {
for (j in 1:ncol(x)) {
z[, i] = z[, i] * dbinom(x[ ,j], 1, mu[i,j])
}
z[, i] = z[, i] * pi[i]
total= total + z[,i]
}
for(i in 1:length(pi)){
z[,i] = z[,i]/total
}
#Log likelihood computation.
# # Your code here
llik[it] = sum(total)
cat("iteration: ", it, "log likelihood: ", llik[it], "\n")
flush.console()
# Stop if the log likelihood has not changed significantly
# Your code here
if(abs(old-llik[it])<min_change){
break
}
else{
old = llik[it]
}
#M-step: ML parameter estimation from the data and fractional component assignments
# Your code here
new_mu = matrix(nrow = nrow(mu), ncol = ncol(mu))
new_pi = colSums(z)/nrow(x)
for (i in 1:length(pi)){
nm = sum(z[,i])
new_mu[i,] = colSums(x*z[,i])/nm
}
mu = new_mu
pi = new_pi
}
set.seed(1234567890)
max_it <- 100 # max number of EM iterations
min_change <- 0.01 # min change in log likelihood between two consecutive EM iterations
N=1000 # number of training points
D=10 # number of dimensions
x <- matrix(nrow=N, ncol=D) # training data
true_pi <- vector(length = 2) # true mixing coefficients
true_mu <- matrix(nrow=2, ncol=D) # true conditional distributions
true_pi=c(1/2,1/2)#,1/3)
true_mu[1,]=c(0.5, 0.6,0.4,0.7,0.3,0.8,0.2,0.9,0.1,1)
true_mu[2,]=c(0.7, 0.4,0.6,0.3,0.7,0.2,0.8,0.1,0.9,0)
#true_mu[3,]=c(0.3, 0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5)
plot(true_mu[1,], type="o", col="blue", ylim=c(0,1))
points(true_mu[2,], type="o", col="red")
#points(true_mu[3,], type="o", col="green")
# Producing the training data
for(n in 1:N) {
k <- sample(1:2,1,prob=true_pi)
for(d in 1:D) {
x[n,d] <- rbinom(1,1,true_mu[k,d])
}
}
K=2 # number of guessed components
z <- matrix(nrow=N, ncol=K) # fractional component assignments
pi <- vector(length = K) # mixing coefficients
mu <- matrix(nrow=K, ncol=D) # conditional distributions
llik <- vector(length = max_it) # log likelihood of the EM iterations
# Random initialization of the paramters
pi <- runif(K,0.49,0.51)
pi <- pi / sum(pi)
for(k in 1:K) {
mu[k,] <- runif(D,0.49,0.51)
}
pi
mu
old = 0
for(it in 1:max_it) {
plot(mu[1,], type="o", col="blue", ylim=c(0,1))
points(mu[2,], type="o", col="red")
#points(mu[3,], type="o", col="green")
#points(mu[4,], type="o", col="yellow")
Sys.sleep(0.5)
# E-step: Computation of the fractional component assignments
# Your code here
Estep <- list()
# denominator
total <- matrix(0, nrow = nrow(x), ncol= 1)
z = matrix(1, nrow = nrow(x), ncol = length(pi))
for (i in 1:length(pi)) {
for (j in 1:ncol(x)) {
z[, i] = z[, i] * dbinom(x[ ,j], 1, mu[i,j])
}
z[, i] = z[, i] * pi[i]
total= total + z[,i]
}
for(i in 1:length(pi)){
z[,i] = z[,i]/total
}
#Log likelihood computation.
# # Your code here
llik[it] = log(sum(total))
cat("iteration: ", it, "log likelihood: ", llik[it], "\n")
flush.console()
# Stop if the log likelihood has not changed significantly
# Your code here
if(abs(old-llik[it])<min_change){
break
}
else{
old = llik[it]
}
#M-step: ML parameter estimation from the data and fractional component assignments
# Your code here
new_mu = matrix(nrow = nrow(mu), ncol = ncol(mu))
new_pi = colSums(z)/nrow(x)
for (i in 1:length(pi)){
nm = sum(z[,i])
new_mu[i,] = colSums(x*z[,i])/nm
}
mu = new_mu
pi = new_pi
}
set.seed(1234567890)
max_it <- 100 # max number of EM iterations
min_change <- 0.01 # min change in log likelihood between two consecutive EM iterations
N=1000 # number of training points
D=10 # number of dimensions
x <- matrix(nrow=N, ncol=D) # training data
true_pi <- vector(length = 2) # true mixing coefficients
true_mu <- matrix(nrow=2, ncol=D) # true conditional distributions
true_pi=c(1/2,1/2)#,1/3)
true_mu[1,]=c(0.5, 0.6,0.4,0.7,0.3,0.8,0.2,0.9,0.1,1)
true_mu[2,]=c(0.7, 0.4,0.6,0.3,0.7,0.2,0.8,0.1,0.9,0)
#true_mu[3,]=c(0.3, 0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5)
plot(true_mu[1,], type="o", col="blue", ylim=c(0,1))
points(true_mu[2,], type="o", col="red")
#points(true_mu[3,], type="o", col="green")
# Producing the training data
for(n in 1:N) {
k <- sample(1:2,1,prob=true_pi)
for(d in 1:D) {
x[n,d] <- rbinom(1,1,true_mu[k,d])
}
}
K=2 # number of guessed components
z <- matrix(nrow=N, ncol=K) # fractional component assignments
pi <- vector(length = K) # mixing coefficients
mu <- matrix(nrow=K, ncol=D) # conditional distributions
llik <- vector(length = max_it) # log likelihood of the EM iterations
# Random initialization of the paramters
pi <- runif(K,0.49,0.51)
pi <- pi / sum(pi)
for(k in 1:K) {
mu[k,] <- runif(D,0.49,0.51)
}
pi
mu
old = 0
for(it in 1:max_it) {
plot(mu[1,], type="o", col="blue", ylim=c(0,1))
points(mu[2,], type="o", col="red")
#points(mu[3,], type="o", col="green")
#points(mu[4,], type="o", col="yellow")
Sys.sleep(0.5)
# E-step: Computation of the fractional component assignments
# Your code here
Estep <- list()
# denominator
total <- matrix(0, nrow = nrow(x), ncol= 1)
z = matrix(1, nrow = nrow(x), ncol = length(pi))
for (i in 1:length(pi)) {
for (j in 1:ncol(x)) {
z[, i] = z[, i] * dbinom(x[ ,j], 1, mu[i,j])
}
z[, i] = z[, i] * pi[i]
total= total + z[,i]
}
for(i in 1:length(pi)){
z[,i] = z[,i]/total
}
#Log likelihood computation.
# # Your code here
llik[it] = log(sum(total))
cat("iteration: ", it, "log likelihood: ", llik[it], "\n")
flush.console()
# Stop if the log likelihood has not changed significantly
# Your code here
if(abs(old-llik[it])<min_change){
break
}
else{
old = llik[it]
}
#M-step: ML parameter estimation from the data and fractional component assignments
# Your code here
new_mu = matrix(nrow = nrow(mu), ncol = ncol(mu))
new_pi = colSums(z)/nrow(x)
for (i in 1:length(pi)){
nm = sum(z[,i])
new_mu[i,] = colSums(x*z[,i])/nm
}
mu = new_mu
pi = new_pi
}
library(neuralnet)
set.seed(1234567890)
Var <- runif(50, 0, 10)
library("neuralnet")
install.packages("neuralnet")
library(neuralnet)
set.seed(1234567890)
Var <- runif(50, 0, 10)
library(neuralnet)
set.seed(1234567890)
Var <- runif(50, 0, 10)
trva <- data.frame(Var, Sin=sin(Var))
tr <- trva[1:25,] # Training
va <- trva[26:50,] # Validation
restr <- vector(length = 10)
resva <- vector(length = 10)
winit <- runif(22, -1, 1) # Random initializaiton of the weights in the interval [-1, 1]
for(i in 1:10) {
nn <- neuralnet(formula = Sin ~ Var, data = tr, hidden = c(3,3), startweights = winit,
threshold = i/1000, lifesign = "full")
# nn$result.matrix
aux <- compute(nn, tr[,1])$net.result # Compute predictions for the trainig set and their squared error
restr[i] <- sum((tr[,2] - aux)**2)/2
aux <- compute(nn, va[,1])$net.result # The same for the validation set
resva[i] <- sum((va[,2] - aux)**2)/2
}
plot(restr, type = "o")
plot(resva, type = "o")
restr
resva
set.seed(1234567890)
Var <- runif(50, 0, 10)
trva <- data.frame(Var, Sin=sin(Var))
tr <- trva[1:25,] # Training
va <- trva[26:50,] # Validation
restr <- vector(length = 10)
resva <- vector(length = 10)
winit <- runif(41, -1, 1) # Random initializaiton of the weights in the interval [-1, 1]
for(i in 1:10) {
nn <- neuralnet(formula = Sin ~ Var, data = tr, hidden = c(10), startweights = winit,
threshold = i/1000, lifesign = "full")
# nn$result.matrix
aux <- compute(nn, tr[,1])$net.result # Compute predictions for the trainig set and their squared error
restr[i] <- sum((tr[,2] - aux)**2)/2
aux <- compute(nn, va[,1])$net.result # The same for the validation set
resva[i] <- sum((va[,2] - aux)**2)/2
}
plot(restr, type = "o")
plot(resva, type = "o")
restr
resva
Var <- runif(50, 0, 10)
te <- data.frame(Var, Sin=sin(Var))
restr <- vector(length = 10)
resva <- vector(length = 10)
winit <- runif(31, -1, 1) # Random initializaiton of the weights in the interval [-1, 1]
for(i in 1:10) {
nn <- neuralnet(formula = Sin ~ Var, data = tr, hidden = c(10), startweights = winit,
threshold = i/1000, lifesign = "full")
# nn$result.matrix
aux <- compute(nn, tr[,1])$net.result # Compute predictions for the trainig set and their squared error
restr[i] <- sum((tr[,2] - aux)**2)/2
aux <- compute(nn, va[,1])$net.result # The same for the validation set
resva[i] <- sum((va[,2] - aux)**2)/2
}
plot(restr, type = "o")
plot(resva, type = "o")
restr
resva
restr <- vector(length = 10)
resva <- vector(length = 10)
winit <- runif(32, -1, 1) # Random initializaiton of the weights in the interval [-1, 1]
for(i in 1:10) {
nn <- neuralnet(formula = Sin ~ Var, data = tr, hidden = c(10), startweights = winit,
threshold = i/1000, lifesign = "full")
# nn$result.matrix
aux <- compute(nn, tr[,1])$net.result # Compute predictions for the trainig set and their squared error
restr[i] <- sum((tr[,2] - aux)**2)/2
aux <- compute(nn, va[,1])$net.result # The same for the validation set
resva[i] <- sum((va[,2] - aux)**2)/2
}
library(neuralnet)
# two layers
set.seed(1234567890)
Var <- runif(50, 0, 10)
trva <- data.frame(Var, Sin=sin(Var))
tr <- trva[1:25,] # Training
va <- trva[26:50,] # Validation
# plot(trva)
# plot(tr)
# plot(va)
restr <- vector(length = 10)
resva <- vector(length = 10)
winit <- runif(22, -1, 1) # Random initializaiton of the weights in the interval [-1, 1]
for(i in 1:10) {
nn <- neuralnet(formula = Sin ~ Var, data = tr, hidden = c(3,3), startweights = winit,
threshold = i/1000, lifesign = "full")
# nn$result.matrix
aux <- compute(nn, tr[,1])$net.result # Compute predictions for the trainig set and their squared error
restr[i] <- sum((tr[,2] - aux)**2)/2
aux <- compute(nn, va[,1])$net.result # The same for the validation set
resva[i] <- sum((va[,2] - aux)**2)/2
}
plot(restr, type = "o")
plot(resva, type = "o")
restr
resva
set.seed(1234567890)
Var <- runif(50, 0, 10)
trva <- data.frame(Var, Sin=sin(Var))
tr <- trva[1:25,] # Training
va <- trva[26:50,] # Validation
restr <- vector(length = 10)
resva <- vector(length = 10)
winit <- runif(30, -1, 1) # Random initializaiton of the weights in the interval [-1, 1]
for(i in 1:10) {
nn <- neuralnet(formula = Sin ~ Var, data = tr, hidden = c(10), startweights = winit,
threshold = i/1000, lifesign = "full")
# nn$result.matrix
aux <- compute(nn, tr[,1])$net.result # Compute predictions for the trainig set and their squared error
restr[i] <- sum((tr[,2] - aux)**2)/2
aux <- compute(nn, va[,1])$net.result # The same for the validation set
resva[i] <- sum((va[,2] - aux)**2)/2
}
restr <- vector(length = 10)
resva <- vector(length = 10)
winit <- runif(31, -1, 1) # Random initializaiton of the weights in the interval [-1, 1]
for(i in 1:10) {
nn <- neuralnet(formula = Sin ~ Var, data = tr, hidden = c(10), startweights = winit,
threshold = i/1000, lifesign = "full")
# nn$result.matrix
aux <- compute(nn, tr[,1])$net.result # Compute predictions for the trainig set and their squared error
restr[i] <- sum((tr[,2] - aux)**2)/2
aux <- compute(nn, va[,1])$net.result # The same for the validation set
resva[i] <- sum((va[,2] - aux)**2)/2
}
?neuralnet
set.seed(1234567890)
spam <- read.csv2("../Lab2aBlock2/spambase.csv")
ind <- sample(1:nrow(spam))
spam <- spam[ind,c(1:48,58)]
knitr::opts_chunk$set(echo = TRUE)
library(boot)
library(mboost)
?cv
library(kernlab)
?cross
setwd("C:/Users/Sridhar/Desktop/LIU_DM_lab/Lab03")
